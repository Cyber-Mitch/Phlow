{"version":3,"sources":["../src/types.ts","../src/constant.ts","../src/address.ts","../src/index.ts"],"sourcesContent":["//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9","export enum VMType {\n    EVM = 'EVM',\n    ZKLITEVM = 'ZKLITEVM',\n    CAIROVM = 'CAIROVM',\n    IMXVM = 'IMXVM',\n    LPRVM = 'LPRVM',\n    ZKSPVM = 'ZKSPVM',\n    SOLANAVM = 'SOLANAVM',\n    TVM = 'TVM',\n    BTCVM = 'BTCVM',\n    TRONVM = 'TRONVM',\n    FUELVM = 'FUELVM',\n    APTOSVM = 'APTOSVM',\n    SUIVM = 'SUIVM'\n}","import { VMType } from \"./constant\";\nimport { validateAndParseAddress } from \"starknet\";\nimport { TronWeb } from \"tronweb\";\nimport * as bitcoin from \"bitcoinjs-lib\";\nimport TonWeb from \"tonweb\";\n// import base58 from 'bs58';\n\nexport async function isValidAddress(address: string, vm: VMType): Promise<boolean> {\n    switch (vm) {\n        case VMType.EVM:\n            return isEVMAddress(address);\n        case VMType.BTCVM:\n            return isBTCAddress(address); \n        case VMType.CAIROVM:\n            return isCAIROAddress(address); \n        case VMType.FUELVM:\n            return isFUELAddress(address);\n        case VMType.IMXVM:\n            return isIMXAddress(address);\n        case VMType.LPRVM:\n            return isLPRAddress(address); \n        case VMType.SOLANAVM:\n            return await isSOLANAAddress(address);\n        case VMType.TVM:\n            return isTONAddress(address);        \n        case VMType.TRONVM:\n            return isTRONAddress(address);\n        case VMType.ZKLITEVM:\n            return isZKLITEAddress(address);\n        case VMType.APTOSVM:\n            return isAPTOSAddress(address);\n        case VMType.SUIVM:\n            return isSUIAddress(address);\n        default:\n            throw new Error(`Unsupported VMType: ${vm}`);\n    }\n}\n\nexport function isEVMAddress(address: string): boolean {\n    try {\n        return (address.startsWith('0x') && address.length == 42);\n    } catch {\n        return false;\n    }\n}\n\nexport function isBTCAddress(address: string): boolean {\n    try {\n        if(!address || address == '') {\n            return false;\n        }\n        bitcoin.address.toOutputScript(address, bitcoin.networks.bitcoin);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nexport function isCAIROAddress(address: string) {\n    try {\n        if(!address || address.length <= 53) {\n            return false;\n        }\n        const parsedAddress = validateAndParseAddress(address);\n        return parsedAddress? true : false;\n    } catch (error) {\n        return false;\n    } \n}\n\nexport function isFUELAddress(address: string) {\n    return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);\n}\n\nexport function isIMXAddress(address: string) {\n    return isEVMAddress(address);\n}\n\nexport function isLPRAddress(address: string) {\n    return isEVMAddress(address);\n}\n\nexport async function isSOLANAAddress(address: string): Promise<boolean> {\n  try {\n    const base58 = await import('bs58');\n      const decoded = base58.decode(address);\n      return decoded.length >= 32 && decoded.length <= 44;\n  } catch {\n      return false;\n  }\n}\n\nexport function isTONAddress(address: string) {\n  try {\n    if(!address || address == '') {\n      return false;\n    }\n    const parsedAddress = new TonWeb.Address(address);\n    return parsedAddress? true : false;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function isTRONAddress(address: string) {\n  if(!address || address == '') {\n    return false;\n  }\n  return TronWeb.isAddress(address);\n}\n\nexport function isZKLITEAddress(address: string) {\n  return isEVMAddress(address);\n}\n\nexport function isAPTOSAddress(address: string) {\n  try {\n    return (address.startsWith('0x') && address.length == 66);\n  } catch {\n      return false;\n  }\n}\n\nexport function isSUIAddress(address: string) {\n  return isAPTOSAddress(address);\n}","export * from './constant'\nexport * from './address'\nexport * as types from './types'"],"mappings":"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","names":["require_types","__commonJSMin","VMType","validateAndParseAddress","TronWeb","bitcoin","TonWeb","isValidAddress","address","vm","VMType","EVM","isEVMAddress","BTCVM","isBTCAddress","CAIROVM","isCAIROAddress","FUELVM","isFUELAddress","IMXVM","isIMXAddress","LPRVM","isLPRAddress","SOLANAVM","isSOLANAAddress","TVM","isTONAddress","TRONVM","isTRONAddress","ZKLITEVM","isZKLITEAddress","APTOSVM","isAPTOSAddress","SUIVM","isSUIAddress","Error","startsWith","length","toOutputScript","networks","bitcoin","parsedAddress","validateAndParseAddress","test","decoded","decode","TonWeb","Address","TronWeb","isAddress","types"]}