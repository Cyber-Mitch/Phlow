{"version":3,"sources":["/Users/kakui/projects/bridge-frontend/packages/vm-core/dist/index.js","../src/types.ts","../src/constant.ts","../src/address.ts"],"names":["require_types","__commonJSMin","VMType","isValidAddress","address","vm","EVM","isEVMAddress","BTCVM","isBTCAddress","CAIROVM","isCAIROAddress","FUELVM","isFUELAddress","IMXVM","isIMXAddress","LPRVM","isLPRAddress","SOLANAVM","isSOLANAAddress","TVM","isTONAddress","TRONVM","isTRONAddress","ZKLITEVM","isZKLITEAddress","APTOSVM","isAPTOSAddress","SUIVM","isSUIAddress","Error"],"mappings":"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","file":"/Users/kakui/projects/bridge-frontend/packages/vm-core/dist/index.js","sourcesContent":[null,"//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9","export enum VMType {\n    EVM = 'EVM',\n    ZKLITEVM = 'ZKLITEVM',\n    CAIROVM = 'CAIROVM',\n    IMXVM = 'IMXVM',\n    LPRVM = 'LPRVM',\n    ZKSPVM = 'ZKSPVM',\n    SOLANAVM = 'SOLANAVM',\n    TVM = 'TVM',\n    BTCVM = 'BTCVM',\n    TRONVM = 'TRONVM',\n    FUELVM = 'FUELVM',\n    APTOSVM = 'APTOSVM',\n    SUIVM = 'SUIVM'\n}","import { VMType } from \"./constant\";\nimport { validateAndParseAddress } from \"starknet\";\nimport { TronWeb } from \"tronweb\";\nimport * as bitcoin from \"bitcoinjs-lib\";\nimport TonWeb from \"tonweb\";\n// import base58 from 'bs58';\n\nexport async function isValidAddress(address: string, vm: VMType): Promise<boolean> {\n    switch (vm) {\n        case VMType.EVM:\n            return isEVMAddress(address);\n        case VMType.BTCVM:\n            return isBTCAddress(address); \n        case VMType.CAIROVM:\n            return isCAIROAddress(address); \n        case VMType.FUELVM:\n            return isFUELAddress(address);\n        case VMType.IMXVM:\n            return isIMXAddress(address);\n        case VMType.LPRVM:\n            return isLPRAddress(address); \n        case VMType.SOLANAVM:\n            return await isSOLANAAddress(address);\n        case VMType.TVM:\n            return isTONAddress(address);        \n        case VMType.TRONVM:\n            return isTRONAddress(address);\n        case VMType.ZKLITEVM:\n            return isZKLITEAddress(address);\n        case VMType.APTOSVM:\n            return isAPTOSAddress(address);\n        case VMType.SUIVM:\n            return isSUIAddress(address);\n        default:\n            throw new Error(`Unsupported VMType: ${vm}`);\n    }\n}\n\nexport function isEVMAddress(address: string): boolean {\n    try {\n        return (address.startsWith('0x') && address.length == 42);\n    } catch {\n        return false;\n    }\n}\n\nexport function isBTCAddress(address: string): boolean {\n    try {\n        if(!address || address == '') {\n            return false;\n        }\n        bitcoin.address.toOutputScript(address, bitcoin.networks.bitcoin);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nexport function isCAIROAddress(address: string) {\n    try {\n        if(!address || address.length <= 53) {\n            return false;\n        }\n        const parsedAddress = validateAndParseAddress(address);\n        return parsedAddress? true : false;\n    } catch (error) {\n        return false;\n    } \n}\n\nexport function isFUELAddress(address: string) {\n    return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);\n}\n\nexport function isIMXAddress(address: string) {\n    return isEVMAddress(address);\n}\n\nexport function isLPRAddress(address: string) {\n    return isEVMAddress(address);\n}\n\nexport async function isSOLANAAddress(address: string): Promise<boolean> {\n  try {\n    const base58 = await import('bs58');\n      const decoded = base58.decode(address);\n      return decoded.length >= 32 && decoded.length <= 44;\n  } catch {\n      return false;\n  }\n}\n\nexport function isTONAddress(address: string) {\n  try {\n    if(!address || address == '') {\n      return false;\n    }\n    const parsedAddress = new TonWeb.Address(address);\n    return parsedAddress? true : false;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function isTRONAddress(address: string) {\n  if(!address || address == '') {\n    return false;\n  }\n  return TronWeb.isAddress(address);\n}\n\nexport function isZKLITEAddress(address: string) {\n  return isEVMAddress(address);\n}\n\nexport function isAPTOSAddress(address: string) {\n  try {\n    return (address.startsWith('0x') && address.length == 66);\n  } catch {\n      return false;\n  }\n}\n\nexport function isSUIAddress(address: string) {\n  return isAPTOSAddress(address);\n}"]}