var le=Object.defineProperty;var de=(l,e,t)=>e in l?le(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t;var g=(l,e,t)=>de(l,typeof e!="symbol"?e+"":e,t);var z=(t=>(t.TESTNET="https://testnet-api.orbiter.finance/sdk",t.MAINNET="https://api.orbiter.finance/sdk",t))(z||{}),Y=(t=>(t.TESTNET="https://testnet-cdn.orbiter.finance/config",t.MAINNET="https://cdn.orbiter.finance/config",t))(Y||{}),C=(t=>(t.EOA="EOA",t.CONTRACT="CONTRACT",t))(C||{});import{VMType as S}from"@orbiter-finance/vm-core";import{VMType as v}from"@orbiter-finance/vm-core";import te from"bignumber.js";import{hexlify as ye,Interface as _,toUtf8Bytes as fe}from"ethers";var f=class{constructor(e){g(this,"_configService");this._configService=e}isValidTransferType(e){return!0}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){throw new Error(`createTransfer need implement, params: 
    srcAddress: ${e}, srcToken: ${JSON.stringify(t)}, dstAddress: ${n}, dstToken: ${JSON.stringify(i)}, value: ${r}, vc: ${a}, 
    routerType: ${s}, makerAddress: ${o}, chainId: ${m}, contractAddress: ${u}, channelId: ${p}`)}async createApprove(e,t,n,i,r){throw new Error(`createApprove need implement, params: 
      ownerAddress: ${e}, spenderAddress: ${t}, approveToken: ${JSON.stringify(n)}, value: ${r}, chainId: ${i}`)}async createAllowance(e,t,n,i){throw new Error(`checkAllowance need implement, params: 
      ownerAddress: ${e}, spenderAddress: ${t}, approveToken: ${JSON.stringify(n)}, chainId: ${i}`)}};var $=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];var E=[{members:[{name:"low",offset:0,type:"felt"},{name:"high",offset:1,type:"felt"}],name:"Uint256",size:2,type:"struct"},{inputs:[{name:"name",type:"felt"},{name:"symbol",type:"felt"},{name:"recipient",type:"felt"}],name:"constructor",outputs:[],type:"constructor"},{inputs:[],name:"name",outputs:[{name:"name",type:"felt"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{name:"symbol",type:"felt"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{name:"totalSupply",type:"Uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{name:"decimals",type:"felt"}],stateMutability:"view",type:"function"},{inputs:[{name:"account",type:"felt"}],name:"balanceOf",outputs:[{name:"balance",type:"Uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"owner",type:"felt"},{name:"spender",type:"felt"}],name:"allowance",outputs:[{name:"remaining",type:"Uint256"}],stateMutability:"view",type:"function"},{inputs:[{name:"recipient",type:"felt"},{name:"amount",type:"Uint256"}],name:"transfer",outputs:[{name:"success",type:"felt"}],type:"function"},{inputs:[{name:"sender",type:"felt"},{name:"recipient",type:"felt"},{name:"amount",type:"Uint256"}],name:"transferFrom",outputs:[{name:"success",type:"felt"}],type:"function"},{inputs:[{name:"spender",type:"felt"},{name:"amount",type:"Uint256"}],name:"approve",outputs:[{name:"success",type:"felt"}],type:"function"},{inputs:[{name:"spender",type:"felt"},{name:"added_value",type:"Uint256"}],name:"increaseAllowance",outputs:[{name:"success",type:"felt"}],type:"function"},{inputs:[{name:"spender",type:"felt"},{name:"subtracted_value",type:"Uint256"}],name:"decreaseAllowance",outputs:[{name:"success",type:"felt"}],type:"function"},{inputs:[{name:"recipient",type:"felt"},{name:"amount",type:"Uint256"}],name:"mint",outputs:[],type:"function"},{inputs:[{name:"user",type:"felt"},{name:"amount",type:"Uint256"}],name:"burn",outputs:[],type:"function"}];var Q=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"transfer",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"transferToken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"address[]",name:"tos",type:"address[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"}],name:"transferTokens",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address[]",name:"tos",type:"address[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"}],name:"transfers",outputs:[],stateMutability:"payable",type:"function"}];var ee=[{members:[{name:"low",offset:0,type:"felt"},{name:"high",offset:1,type:"felt"}],name:"Uint256",size:2,type:"struct"},{data:[{name:"to",type:"felt"},{name:"amount",type:"Uint256"},{name:"token",type:"felt"},{name:"ext_len",type:"felt"},{name:"ext",type:"felt*"}],keys:[],name:"Transfer",type:"event"},{inputs:[{name:"_token",type:"felt"},{name:"_to",type:"felt"},{name:"_amount",type:"Uint256"},{name:"_ext_len",type:"felt"},{name:"_ext",type:"felt*"}],name:"transferERC20",outputs:[],type:"function"}];var M=class extends f{async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);if(s=="CONTRACT"&&!u)throw new Error("contractAddress is required");let c;if(s==="EOA"){if(e!==n)throw new Error(`EVM EOA transfer not support cross address transfer, srcAddress:${e}, dstAddress:${n}.`);if(t.isNative)c={to:o,value:r,data:"0x"};else{let y=new _($),T=o,h=r,b=y.encodeFunctionData("transfer",[T,h]);c={to:t.address,data:b,value:"0"}}}else if(s==="CONTRACT"){let y=new _(Q),T=o,h=ye(fe(p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`));if(t.isNative){let b=y.encodeFunctionData("transfer",[T,h]);c={to:u,data:b,value:r}}else{let b=t.address,w=y.encodeFunctionData("transferToken",[b,T,r,h]);c={to:u,data:w,value:"0"}}}return{srcAddress:e,dstAddress:n,value:r,amount:new te(r).div(10**t.decimals).toString(),raw:c}}async createApprove(e,t,n,i,r){let a=new _($),s=r,o=a.encodeFunctionData("approve",[t,s]),m={to:n.address,data:o,value:"0"};return{ownerAddress:e,spenderAddress:t,value:r,amount:new te(r).div(10**n.decimals).toString(),raw:m}}async createAllowance(e,t,n,i){let a=new _($).encodeFunctionData("allowance",[e,t]);return{to:n.address,data:a,value:"0"}}};import ne from"bignumber.js";import{Contract as x,shortString as re,uint256 as ie}from"starknet";var I=class extends f{isValidTransferType(e){return e!="EOA"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);if(!u)throw new Error("contractAddress is required");let c=ie.bnToUint256(r),T=new x(E,t.address).populate("approve",[u,c]),h=new x(ee,u),b=p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`,w=re.splitLongString(b).map(me=>re.encodeShortString(me)),A=h.populate("transferERC20",[t.address,o,c,w]);return{srcAddress:e,dstAddress:n,value:r,amount:new ne(r).div(10**t.decimals).toString(),raw:[T,A]}}async createApprove(e,t,n,i,r){let a=new x(E,n.address),s=ie.bnToUint256(r),o=a.populate("approve",[t,s]);return{ownerAddress:e,spenderAddress:t,value:r,amount:new ne(r).div(10**n.decimals).toString(),raw:o}}async createAllowance(e,t,n,i){return new x(E,n.address).populate("allowance",[e,t])}};import ge from"bignumber.js";var V=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);if(e!==n)throw new Error("IMX not support cross address tranfer.");let c=p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`;return{srcAddress:e,dstAddress:n,value:r,amount:new ge(r).div(10**t.decimals).toString(),raw:c}}};import Te from"bignumber.js";var F=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);let c=p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`;return{srcAddress:e,dstAddress:n,value:r,amount:new Te(r).div(10**t.decimals).toString(),raw:c}}};import he from"bignumber.js";import{hexlify as we,toUtf8Bytes as be}from"ethers";import{PublicKey as N,Transaction as Ce,TransactionInstruction as ve}from"@solana/web3.js";import{createTransferInstruction as Se,getAssociatedTokenAddress as se,TOKEN_PROGRAM_ID as ke}from"@solana/spl-token";var B=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);let c=new N(e),y=new N(t.address),T=new N(o),h=await se(y,c),b=await se(y,T,!0),w=new Ce().add(Se(h,b,c,Number(r),[],ke)).add(new ve({keys:[{pubkey:c,isSigner:!0,isWritable:!0}],data:Buffer.from(we(be(p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`)),"utf-8"),programId:new N("MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr")}));return{srcAddress:e,dstAddress:n,value:r,amount:new he(r).div(10**t.decimals).toString(),raw:w}}};import ae from"bignumber.js";import k from"tonweb";var O=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);let c=p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`,y=new k.Address(e),T=new k.Address(o),h=new k.boc.Cell;if(h.bits.writeUint(0,128),h.bits.writeString(c),t.isNative)return{srcAddress:e,dstAddress:n,value:r,amount:new ae(r).div(10**t.decimals).toString(),raw:h};{let b=new Date().getHours()*3600+new Date().getMinutes()*60+new Date().getSeconds(),w=new k.boc.Cell;w.bits.writeUint(260734629,32),w.bits.writeUint(b,64),w.bits.writeCoins(new k.utils.BN(r)),w.bits.writeAddress(T),w.bits.writeAddress(y),w.bits.writeBit(!1),w.bits.writeCoins(k.utils.toNano("0")),w.bits.writeBit(!0),w.refs.push(h);let A=k.utils.bytesToBase64(await w.toBoc(!1));return{srcAddress:e,dstAddress:n,value:r,amount:new ae(r).div(10**t.decimals).toString(),raw:A}}}};import Ae from"bignumber.js";var P=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);if(e!==n)throw new Error("ZKSync Lite not support cross address tranfer.");let c=p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`;return{srcAddress:e,dstAddress:n,value:r,amount:new Ae(r).div(10**t.decimals).toString(),raw:c}}};import{TronWeb as X,BigNumber as oe}from"tronweb";var L=class extends f{isValidTransferType(e){return e!="EOA"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);if(!u)throw new Error("contractAddress is required");let c=this.getUrl(m);if(!c)throw new Error(`Unsupported Tron chainId: ${m}`);let y=new X({fullHost:c}),T=p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`,h=y.toHex(T),b="transferToken(address,address,uint256,bytes)",w=[{type:"address",value:t.address},{type:"address",value:o},{type:"uint256",value:r},{type:"bytes",value:h}],A=await y.transactionBuilder.triggerSmartContract(u,b,{txLocal:!0},w,e);return{srcAddress:e,dstAddress:n,value:r,amount:new oe(r).div(10**t.decimals).toString(),raw:A}}async createApprove(e,t,n,i,r){let a=this.getUrl(i);if(!a)throw new Error(`Unsupported Tron chainId: ${i}`);let s=new X({fullHost:a}),o="approve(address,uint256)",m=[{type:"address",value:t},{type:"uint256",value:r}],u=await s.transactionBuilder.triggerSmartContract(n.address,o,{txLocal:!0},m,e);return{ownerAddress:e,spenderAddress:t,value:r,amount:new oe(r).div(10**n.decimals).toString(),raw:u}}async createAllowance(e,t,n,i){let r=this.getUrl(i);if(!r)throw new Error(`Unsupported Tron chainId: ${i}`);let a=new X({fullHost:r}),s="allowance(address,address)",o=[{type:"address",value:e},{type:"address",value:t}];return await a.transactionBuilder.triggerSmartContract(n.address,s,{txLocal:!0},o,e)}getUrl(e){let t;return e==="3448148188"?t="https://nile.trongrid.io":e==="728126428"?t="https://api.trongrid.io":e==="2494104990"&&(t="https://api.shasta.trongrid.io"),t}};import Re from"bignumber.js";import*as D from"bitcoinjs-lib";var U=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);if(!t.isNative)throw new Error("only support native currency");let c=new D.Psbt;c.addOutput({address:o,value:Number(r)});let y=D.payments.embed({data:[Buffer.from(p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`,"utf-8")]}).output;if(!y)throw new Error("create callDataBuffer failed");return c.addOutput({script:y,value:0}),{srcAddress:e,dstAddress:n,value:r,amount:new Re(r).div(10**t.decimals).toString(),raw:c}}};import $e from"bignumber.js";import{hexlify as Ee,toUtf8Bytes as _e}from"ethers";var G=class extends f{isValidTransferType(e){return e!="CONTRACT"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);let c=Ee(_e(p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`));return{srcAddress:e,dstAddress:n,value:r,amount:new $e(r).div(10**t.decimals).toString(),raw:c}}};import Me from"bignumber.js";import{hexlify as xe,toUtf8Bytes as Ie}from"ethers";var K=class extends f{isValidTransferType(e){return e!="EOA"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);let c=xe(Ie(p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`)),y={function:`${u}::message::transfer_token`,typeArguments:[t.address],functionArguments:[o,Number(r),c]};return{srcAddress:e,dstAddress:n,value:r,amount:new Me(r).div(10**t.decimals).toString(),raw:y}}};import Ve from"bignumber.js";import{hexlify as Fe,toUtf8Bytes as Ne}from"ethers";var W=class extends f{isValidTransferType(e){return e!="EOA"}async createTransaction(e,t,n,i,r,a,s,o,m,u,p){if(!this.isValidTransferType(s))throw new Error(`not support for router type: ${s}`);let c=Fe(Ne(p?`c=${a}&t=${n}&app=${p}`:`c=${a}&t=${n}`));return{srcAddress:e,dstAddress:n,value:r,amount:new Ve(r).div(10**t.decimals).toString(),raw:c}}};var H=class{constructor(e){g(this,"_services",{});g(this,"configService");this.configService=e}getVMService(e){return this._services[e]?this._services[e]:this.createVMService(e)}createVMService(e){let t;switch(e){case v.EVM:t=new M(this.configService);break;case v.IMXVM:t=new V(this.configService);break;case v.LPRVM:t=new F(this.configService);break;case v.SOLANAVM:t=new B(this.configService);break;case v.CAIROVM:t=new I(this.configService);break;case v.TVM:t=new O(this.configService);break;case v.ZKLITEVM:t=new P(this.configService);break;case v.TRONVM:t=new L(this.configService);break;case v.BTCVM:t=new U(this.configService);break;case v.FUELVM:t=new G(this.configService);break;case v.APTOSVM:t=new K(this.configService);break;case v.SUIVM:t=new W(this.configService);break;default:t=void 0;break}return t&&(this._services[e]=t),t}};var pe=(t=>(t.AVAILABLE="available",t.DISABLED="disabled",t))(pe||{});var q=class{constructor(e){g(this,"apiKey");g(this,"dealerId");g(this,"channelId");g(this,"_apiService");g(this,"_chainConfigs");g(this,"_routerConfigs");g(this,"_basePointRules");g(this,"_tokens");this._apiService=e}async initConfig(){try{let e=await this._apiService.getChainList();this._chainConfigs=e}catch(e){let t=e;throw new Error(`init chainConfigs fail, error: ${t.message}, stack: ${t.stack}`)}try{let e=await this._apiService.getRouterList(this.dealerId);this._routerConfigs=e.filter(t=>t.state==="available")}catch(e){let t=e;throw new Error(`init routerConfigs fail, error: ${t.message}, stack: ${t.stack}`)}try{let e=await this._apiService.getBasePointRules();this._basePointRules=e}catch(e){console.error(`init basePointRules fail, error: ${e.message}`),this._basePointRules={}}}getRouterConfigs(){if(!this._routerConfigs)throw new Error("getRouterConfigs fail, error: config need init.");return this._routerConfigs}getRouterConfig(e){if(!this._routerConfigs)throw new Error("getRouterConfig fail, error: config need init.");let t=`${e.srcChainId}/${e.dstChainId}-${e.srcTokenSymbol}/${e.dstTokenSymbol}`;return this._routerConfigs.find(n=>n.line===t)}getChainConfigs(){if(!this._chainConfigs)throw new Error("getChainConfigs fail, error: config need init.");return this._chainConfigs}getChainConfigByName(e){if(!this._chainConfigs)throw new Error("getChainConfigByName fail, error: config need init.");return this._chainConfigs.find(n=>n.name===e)}getChainConfigById(e){if(!this._chainConfigs)throw new Error("getChainConfigById fail, error: config need init.");return this._chainConfigs.find(n=>n.chainId===e)}getBasePointRule(e,t){if(!this._basePointRules)throw new Error("getBasePointRule fail, error: config need init.");let n=this._basePointRules[e],i="0";return n&&(i=n[t]||"0"),i}};var Z=class{constructor(e,t,n){g(this,"apiEndpoint");g(this,"cdnEndpoint");g(this,"apiKey");g(this,"channelId");this.apiEndpoint=e,this.apiKey=t,this.channelId=n,e=="https://api.orbiter.finance/sdk"?this.cdnEndpoint="https://cdn.orbiter.finance/config":this.cdnEndpoint="https://testnet-cdn.orbiter.finance/config"}async fetchAPIGet(e,t){let n=new URL(`${this.apiEndpoint}${e}`);t&&Object.keys(t).forEach(s=>{let o=t[s];o&&n.searchParams.append(s,o)});let i={"Content-Type":"application/json"};i["X-Channel"]="bridge-sdk",this.apiKey&&(i["X-API-Key"]=this.apiKey),this.channelId&&(i["X-Channel-ID"]=this.channelId);let r=await fetch(n.toString(),{method:"GET",headers:i});if(!r.ok)throw new Error(`Error ${r.status}: ${r.statusText}`);let a=await r.json();if(a.status!=="success")throw new Error(a.message);return a.result}async fetchCDNGet(e){let t=new URL(`${this.cdnEndpoint}${e}`),n={"Content-Type":"application/json"},i=await fetch(t.toString(),{method:"GET",headers:n});if(!i.ok)throw new Error(`Error ${i.status}: ${i.statusText}`);return await i.json()}async getChainList(){let e=[];try{e=await this.fetchAPIGet("/chains")}catch{console.log("getChainList From API Fail, will try cdn backup"),e=await this.fetchCDNGet("/chains.json")}return e}async getTokenList(){return await this.fetchAPIGet("/tokens")}async getRouterList(e){let t="contract",n=[];try{n=await this.fetchAPIGet("/routers/v2",e?{dealerId:e,entry:t}:{entry:t})}catch{console.log("getRouterList From API Fail, will try cdn backup"),n=await this.fetchCDNGet("/routers.json")}return n}async getBasePointRules(){return await this.fetchAPIGet("/routers/base-point")}async getSimulatedReceiveAmount(e,t,n,i,r){return await this.fetchAPIGet("/routers/simulation/receiveAmount",{line:e,value:t,nonce:n,dealer:i,brokerageTradeFeeRate:r})}async getTransactionHistory(e,t){return await this.fetchAPIGet("/transaction/history",{address:e,offset:t})}async getTransactionStatus(e){return await this.fetchAPIGet(`/transaction/status/${e}`)}async getUserOpoint(e){return await this.fetchAPIGet(`/opoints/user/${e}`)}};import d from"bignumber.js";import{isValidAddress as R}from"@orbiter-finance/vm-core";function J(l,e,t=" "){let n=e-l.length;return n<=0?l:t.repeat(Math.ceil(n/t.length)).slice(0,n)+l}async function ue(l,e){let n=await fetch(`${l==="TON"?"https://tonapi.io":"https://testnet.tonapi.io"}/v2/traces/${e}`,{method:"GET"});if(!n.ok)throw new Error(`Error ${n.status}: ${n.statusText}`);return(await n.json()).children?.[0]?.transaction?.hash}var j=class{constructor(e,t,n,i,r,a,s,o,m){this.srcChainConfig=e;this.srcToken=t;this.dstChainConfig=n;this.dstToken=i;this.basePoint=r;this._VMService=a;this.routerConfig=s;this.routerType=o;this._channelId=m}get routerId(){return`${this.routerType}-${this.srcChainConfig.chainId}-${this.srcToken.symbol}-${this.dstChainConfig.chainId}-${this.dstToken.symbol}`}get vc(){return this.dstChainConfig.internalId.toString()}get withholdingFee(){return this.routerConfig.withholdingFee}get tradeFee(){return this.routerConfig.tradeFee}get makerAddress(){let e=this.routerConfig?.endpoint;if(!e)throw new Error("getMakerAddress fail");return e}get contractAddress(){return this.routerConfig.endpointContract}get spentTime(){return this.routerConfig.spentTime}_getAmountWithVc(e){let t=new d(e).multipliedBy(10**this.srcToken.decimals).toFixed(0),n=this.vc;if(t.length<=n.length)throw new Error("value length too short");let r=t.slice(0,t.length-n.length)+n;return new d(r).div(10**this.srcToken.decimals).toFixed()}async createTransaction(e,t,n){let i=new d(n).multipliedBy(10**this.srcToken.decimals).toFixed(0);if(!await R(e,this.srcChainConfig.vm))throw new Error(`srcAddress format error: ${e}`);let r=this.vc;return await this._VMService.createTransaction(e,this.srcToken,t,this.dstToken,i,r,this.routerType,this.makerAddress,this.srcChainConfig.chainId,this.contractAddress,this._channelId)}async createApprove(e,t){let n=new d(t).multipliedBy(10**this.srcToken.decimals).toFixed(0);if(this.routerType==="EOA")throw new Error("EOA Transfer no need approve.");let i=this.contractAddress;if(!i)throw new Error("createApprove fail, unavailable target contract address.");if(!await R(e,this.srcChainConfig.vm))throw new Error(`ownerAddress format error: ${e}`);if(!await R(i,this.srcChainConfig.vm))throw new Error(`spenderAddress format error: ${i}`);return this._VMService.createApprove(e,i,this.srcToken,this.srcChainConfig.chainId,n)}async createAllowance(e){if(this.routerType==="EOA")throw new Error("EOA Transfer no need approve.");let t=this.contractAddress;if(!t)throw new Error("createAllowance fail, unavailable target contract address.");if(!await R(e,this.srcChainConfig.vm))throw new Error(`ownerAddress format error: ${e}`);if(!await R(t,this.srcChainConfig.vm))throw new Error(`spenderAddress format error: ${t}`);return this._VMService.createAllowance(e,t,this.srcToken,this.srcChainConfig.chainId)}getMinSendAmountMinusWithHoldingFee(){let e=new d(this.routerConfig.minAmt),t=new d(this.routerConfig.withholdingFee);return e.minus(t).toFixed()}getMinSendAmount(){return this.routerConfig.minAmt}getMaxSendAmount(){return this.routerConfig.maxAmt}simulationAmountPlusWithHoldingFee(e){let t=new d(e);this.routerType=="EOA"&&(t=new d(this._getAmountWithVc(e)));let n=new d(this.getMinSendAmountMinusWithHoldingFee()),i=new d(this.getMaxSendAmount());if(t.lt(n)||t.gt(i.multipliedBy(1.1)))throw new Error(`amount ${e} is not in the allow scale: min: ${this.routerConfig.minAmt} max: ${this.routerConfig.maxAmt}`);let r=new d(this.tradeFee),a=new d(this.withholdingFee),s=a;if(this.routerConfig.tieredFee){let h=t.minus(a).toNumber(),b=this.routerConfig.tieredFee.find(w=>h>w.range[0]&&h<=w.range[1]);b&&(b.tradeFee!=null&&(r=new d(b.tradeFee)),b.withholdingFee!=null&&(a=new d(b.withholdingFee)))}let o=new d(s).minus(a).multipliedBy(r).dividedBy(100).toString();a=new d(this.routerConfig.withholdingFee).minus(o),t=t.plus(a);let m="0",u=this._getTargetAmountSafeLengthByToken(this.dstToken.symbol,this.dstToken.decimals),p=J(m.substring(m.length-u),u,"0"),c=this._getResponseIntent(t.toString(),"0",r.toNumber(),0,a.toString(),p,this.dstToken.decimals-u),y=t.toFixed(),T=new d(c.responseAmount).toFixed();return{sendAmount:y,receiveAmount:T}}simulationAmount(e){let t=new d(e);if(this.routerType==="EOA"&&(t=new d(this._getAmountWithVc(e))),t.lt(Number(this.routerConfig.minAmt))||t.gt(Number(this.routerConfig.maxAmt)*1.1))throw new Error(`amount ${e} is not in the allow scale: min: ${this.routerConfig.minAmt} max: ${this.routerConfig.maxAmt}`);let n=new d(this.tradeFee),i=new d(this.withholdingFee),r=i;if(this.routerConfig.tieredFee){let y=t.minus(i).toNumber(),T=this.routerConfig.tieredFee.find(h=>y>h.range[0]&&y<=h.range[1]);T&&(T.tradeFee!=null&&(n=new d(T.tradeFee)),T.withholdingFee!=null&&(i=new d(T.withholdingFee)))}let a=new d(r).minus(i).multipliedBy(n).dividedBy(100).toString();i=new d(this.routerConfig.withholdingFee).minus(a);let s="1000",o=this._getTargetAmountSafeLengthByToken(this.dstToken.symbol,this.dstToken.decimals),m=J(s.substring(s.length-o),o,"0"),u=this._getResponseIntent(t.toString(),"0",n.toNumber(),0,i.toString(),m,this.dstToken.decimals-o),p=t.toFixed(),c=new d(u.responseAmount).toFixed();return{sendAmount:p,receiveAmount:c}}_getResponseIntent(e,t,n,i,r,a,s){let o=new d(e),m=o.minus(t).minus(r),u=m.times(n).div(100),p=m.times(i||0).div(100),y=m.minus(u).minus(p).toFixed(s,1),T=y.split("."),h=T[1]||"";return{code:0,value:o.toString(),tradeAmount:m.toString(),tradeFeeAmount:u.toString(),brokerageTradeFeeAmount:p.toString(),withholdingFeeAmount:r,responseAmountOrigin:y,responseAmount:new d(`${T[0]}.${h.substring(0,s)}${a}`).toString()}}_getTargetAmountSafeLengthByToken(e,t){return t>=18?5:e==="BTC"?2:4}};var ce=class l{constructor(e){g(this,"_config");g(this,"_apiService");g(this,"_configService");g(this,"_VMServiceFactory");g(this,"_defaultRouterType");this._config=e,this._apiService=new Z(this._config.apiEndpoint,this._config.apiKey,this._config.channelId),this._configService=new q(this._apiService),this._VMServiceFactory=new H(this._configService),this._defaultRouterType=this._config.defaultRouterType||"CONTRACT"}async init(){await this._configService.initConfig()}static async create(e){let t=new l(e);return await t.init(),t}createRouter(e){let t=this._configService.getChainConfigById(e.srcChainId);if(!t)throw new Error(`createRouter fail, error: unavailable source chainId: ${e.srcChainId}.`);let n=this._VMServiceFactory.getVMService(t.vm);if(!n)throw new Error(`createRouter fail, error: unavailable source chain vm type: ${t.vm}.`);let i=t.tokens.find(u=>u.symbol===e.srcTokenSymbol);if(!i)throw new Error(`createRouter fail, error: unavailable source token: ${e.srcTokenSymbol}.`);let r=this._configService.getChainConfigById(e.dstChainId);if(!r)throw new Error(`createRouter fail, error: unavailable destination chainId: ${e.dstChainId}.`);let a=r.tokens.find(u=>u.symbol===e.dstTokenSymbol);if(!a)throw new Error(`createRouter fail, error: unavailable destination token: ${e.srcTokenSymbol}.`);let s=this._configService.getRouterConfig(e);if(!s)throw new Error(`createRouter fail, error: unavailable router, line: '${e.srcChainId}/${e.dstChainId}-${e.srcTokenSymbol}/${e.dstTokenSymbol}.`);if(e.routerType){if(!this.checkTradePairType(t,r,s,e.routerType))throw new Error(`createRouter fail, error: error: unavailable router, line: '${e.srcChainId}/${e.dstChainId}-${e.srcTokenSymbol}/${e.dstTokenSymbol} not support for router type: ${e.routerType}.`)}else if(e.routerType=this._defaultRouterType,!this.checkTradePairType(t,r,s,e.routerType)&&(e.routerType=this._defaultRouterType=="EOA"?"CONTRACT":"EOA",!this.checkTradePairType(t,r,s,e.routerType)))throw new Error(`createRouter fail, error: unavailable router, line: '${e.srcChainId}/${e.dstChainId}-${e.srcTokenSymbol}/${e.dstTokenSymbol}.`);let o=this._configService.getBasePointRule(e.dstChainId,e.dstTokenSymbol),m=this._config.channelId?.indexOf("official-")==0?void 0:this._config.channelId;return new j(t,i,r,a,o,n,s,e.routerType,m)}checkTradePairType(e,t,n,i){if(i=="EOA"){if(e.vm==t.vm||e.vm==S.EVM&&[S.LPRVM,S.ZKLITEVM,S.ZKSPVM].includes(t.vm)||t.vm==S.EVM&&[S.LPRVM,S.ZKLITEVM,S.ZKSPVM].includes(e.vm)||[S.TVM,S.SOLANAVM,S.FUELVM].includes(e.vm))return!0}else if(i=="CONTRACT"&&i=="CONTRACT"&&n.endpointContract)return!0;return!1}getAllChains(){return[...this._configService.getChainConfigs().map(t=>({id:t.chainId,name:t.name}))]}getAllSymbols(){let e=this.getAllChains(),t=new Set;return e.forEach(n=>{this.getAvailableTokens(n.id).forEach(r=>{t.add(r.symbol)})}),[...t]}getChainConfig(e){return this._configService.getChainConfigById(e)}getAvailableTokens(e){let t=this._configService.getChainConfigById(e),n=[];if(t){let a=this._configService.getRouterConfigs().filter(s=>s.srcChain===t.chainId).map(s=>s.srcToken);n=t.tokens.filter(s=>a.includes(s.address))}return n}getAllTradePairs(){let e=this._configService.getRouterConfigs(),t=[];return e.forEach(n=>{let i=this._configService?.getChainConfigById(n.srcChain),r=this._configService?.getChainConfigById(n.tgtChain);if(r){let a=i?.tokens.find(o=>o.address===n.srcToken),s=r?.tokens.find(o=>o.address===n.tgtToken);i&&r&&a&&s&&t.push({srcChainId:n.srcChain,dstChainId:n.tgtChain,srcTokenSymbol:a.symbol,dstTokenSymbol:s.symbol})}}),t}getAvailableTradePairs(e,t){return this.getAllTradePairs().filter(i=>!(e&&i.srcChainId!=e||t&&i.srcTokenSymbol!=t))}async getTransactionHistory(e,t=0){return await this._apiService.getTransactionHistory(e,t)}async getTransactionStatus(e,t){if(t?.includes("TON"))try{e=await ue(t,e)}catch(n){console.error(`getTonOrbiterHash error ${n.message}`)}return await this._apiService.getTransactionStatus(e)}async getUserOpoint(e){return await this._apiService.getUserOpoint(e)}};export{Z as ApiService,Y as CDNENDPOINT,z as ENDPOINT,ce as OrbiterClient,j as Router,pe as RouterState,C as RouterType};
//# sourceMappingURL=index.mjs.map