{"version":3,"sources":["../src/lib/orbiter.interface.ts","../src/lib/orbiter.service.ts","../src/lib/vm-service/vm.factory.ts","../src/lib/vm-service/implement/evm.service.ts","../src/lib/vm-service/vm.service.ts","../src/abi/erc20.ts","../src/abi/orbiter.ts","../src/lib/vm-service/implement/cario.service.ts","../src/lib/vm-service/implement/imx.service.ts","../src/lib/vm-service/implement/lpr.service.ts","../src/lib/vm-service/implement/solana.service.ts","../src/lib/vm-service/implement/t.service.ts","../src/lib/vm-service/implement/zklite.service.ts","../src/lib/vm-service/implement/tron.service.ts","../src/lib/vm-service/implement/btc.service.ts","../src/lib/vm-service/implement/fuel.service.ts","../src/lib/vm-service/implement/aptos.service.ts","../src/lib/vm-service/implement/sui.service.ts","../src/lib/api-service/api.interface.ts","../src/lib/config.service.ts","../src/lib/api-service/api.service.ts","../src/lib/router.service.ts","../src/utils/tools.ts"],"sourcesContent":["export interface ConfigOptions {\n  apiEndpoint: ENDPOINT;\n  dealerId?: string;\n  apiKey?: string;\n  channelId?: string;\n  defaultRouterType?: RouterType;\n}\n\nexport enum ENDPOINT {\n  TESTNET = \"https://testnet-api.orbiter.finance/sdk\",\n  MAINNET = \"https://api.orbiter.finance/sdk\"\n}\n\nexport enum CDNENDPOINT {\n  TESTNET = \"https://testnet-cdn.orbiter.finance/config\",\n  MAINNET = \"https://cdn.orbiter.finance/config\"\n}\n\nexport interface TradePair {\n  srcChainId: string;\n  dstChainId: string;\n  srcTokenSymbol: string;\n  dstTokenSymbol: string;\n  routerType?: RouterType;\n}\n\nexport enum RouterType {\n  EOA = 'EOA',\n  CONTRACT = \"CONTRACT\"\n}\n\nexport interface Chain {\n  id: string;\n  name: string;\n}\n\nexport interface TransactionParams {\n  srcAddress: string;\n  dstAddress: string;\n  value: string;\n  amount: string;\n  raw: unknown;\n}\n\nexport interface ApproveParams {\n  ownerAddress: string;\n  spenderAddress: string;\n  value: string;\n  amount: string;\n  raw: unknown;\n}\n","import { VMType } from \"@orbiter-finance/vm-core\";\nimport { VMServiceFactory } from \"./vm-service/vm.factory\";\nimport { ConfigService } from \"./config.service\";\nimport { Token, Transaction, ChainConfig, RouterConfig } from \"./api-service/api.interface\"\nimport { ApiService } from \"./api-service/api.service\";\nimport { Chain, ConfigOptions, TradePair, RouterType } from \"./orbiter.interface\";\nimport { Router } from \"./router.service\";\nimport { getTonOrbiterHash } from \"../utils/tools\";\n\nexport class OrbiterClient {\n  private readonly _config: ConfigOptions\n  private readonly _apiService: ApiService;\n  private readonly _configService: ConfigService;\n  private readonly _VMServiceFactory: VMServiceFactory;\n  private readonly _defaultRouterType: RouterType;\n\n  constructor(config: ConfigOptions) {\n    this._config = config;\n    this._apiService = new ApiService(this._config.apiEndpoint, this._config.apiKey, this._config.channelId);\n    this._configService = new ConfigService(this._apiService);\n    this._VMServiceFactory = new VMServiceFactory(this._configService);\n    this._defaultRouterType = this._config.defaultRouterType || RouterType.CONTRACT;\n  }\n\n  async init() {\n    await this._configService.initConfig();\n  }\n\n  static async create(config: ConfigOptions): Promise<OrbiterClient> {\n    const client = new OrbiterClient(config);\n    await client.init();\n    return client;\n  }\n\n  createRouter(tradePair: TradePair): Router {\n    const srcChainConfig = this._configService.getChainConfigById(tradePair.srcChainId);\n    if (!srcChainConfig) {\n      throw new Error(`createRouter fail, error: unavailable source chainId: ${tradePair.srcChainId}.`);\n    }\n    const srcVMService = this._VMServiceFactory.getVMService(srcChainConfig.vm);\n    if (!srcVMService) {\n      throw new Error(`createRouter fail, error: unavailable source chain vm type: ${srcChainConfig.vm}.`);\n    }\n    const srcToken = srcChainConfig.tokens.find(token => {\n      return token.symbol === tradePair.srcTokenSymbol;\n    })\n    if (!srcToken) {\n      throw new Error(`createRouter fail, error: unavailable source token: ${tradePair.srcTokenSymbol}.`);\n    }\n    const dstChainConfig = this._configService.getChainConfigById(tradePair.dstChainId);\n    if (!dstChainConfig) {\n      throw new Error(`createRouter fail, error: unavailable destination chainId: ${tradePair.dstChainId}.`);\n    }\n    const dstToken = dstChainConfig.tokens.find(token => {\n      return token.symbol === tradePair.dstTokenSymbol;\n    })\n    if (!dstToken) {\n      throw new Error(`createRouter fail, error: unavailable destination token: ${tradePair.srcTokenSymbol}.`);\n    }\n    const routerConfig = this._configService.getRouterConfig(tradePair);\n    if (!routerConfig) {\n      throw new Error(`createRouter fail, error: unavailable router, line: '${tradePair.srcChainId}/${tradePair.dstChainId}-${tradePair.srcTokenSymbol}/${tradePair.dstTokenSymbol}.`);\n    }\n\n    if (tradePair.routerType) {\n      const available = this.checkTradePairType(srcChainConfig, dstChainConfig, routerConfig, tradePair.routerType);\n      if (!available) {\n        throw new Error(`createRouter fail, error: error: unavailable router, line: '${tradePair.srcChainId}/${tradePair.dstChainId}-${tradePair.srcTokenSymbol}/${tradePair.dstTokenSymbol} not support for router type: ${tradePair.routerType}.`);\n      }\n    } else { // default\n      tradePair.routerType = this._defaultRouterType;\n      const available = this.checkTradePairType(srcChainConfig, dstChainConfig, routerConfig, tradePair.routerType);\n      if (!available) {\n        tradePair.routerType = (this._defaultRouterType == RouterType.EOA) ? RouterType.CONTRACT : RouterType.EOA;\n        const available = this.checkTradePairType(srcChainConfig, dstChainConfig, routerConfig, tradePair.routerType);\n        if (!available) {\n          throw new Error(`createRouter fail, error: unavailable router, line: '${tradePair.srcChainId}/${tradePair.dstChainId}-${tradePair.srcTokenSymbol}/${tradePair.dstTokenSymbol}.`);\n        }\n      }\n    }\n\n    const basePoint = this._configService.getBasePointRule(tradePair.dstChainId, tradePair.dstTokenSymbol);\n    const channelId = this._config.channelId?.indexOf('official-') == 0 ? undefined : this._config.channelId;\n    return new Router(srcChainConfig, srcToken, dstChainConfig, dstToken, basePoint, srcVMService, routerConfig, tradePair.routerType, channelId);\n  }\n\n  private checkTradePairType(srcChainConfig: ChainConfig, dstChainConfig: ChainConfig, routerConfig: RouterConfig, routerType: RouterType) {\n    if(routerType == RouterType.EOA) {\n      if (srcChainConfig.vm == dstChainConfig.vm\n        || (srcChainConfig.vm == VMType.EVM && [VMType.LPRVM, VMType.ZKLITEVM, VMType.ZKSPVM].includes(dstChainConfig.vm))\n        || (dstChainConfig.vm == VMType.EVM && [VMType.LPRVM, VMType.ZKLITEVM, VMType.ZKSPVM].includes(srcChainConfig.vm))\n        || [VMType.TVM, VMType.SOLANAVM, VMType.FUELVM].includes(srcChainConfig.vm)\n      ) {\n        return true;\n      }\n    } else if(routerType == RouterType.CONTRACT) {\n      if (routerType == RouterType.CONTRACT\n        && routerConfig.endpointContract\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getAllChains(): Chain[] {\n    const chainConfigs = this._configService.getChainConfigs();\n    return [...chainConfigs.map(chainConfig => {\n      return {\n        id: chainConfig.chainId,\n        name: chainConfig.name\n      }\n    })]\n  }\n\n  getAllSymbols(): string[] {\n    const chains = this.getAllChains();\n    const symbols: Set<string> = new Set();\n    chains.forEach(chain => {\n      const tokens = this.getAvailableTokens(chain.id);\n      tokens.forEach(token => {\n        symbols.add(token.symbol);\n      })\n    });\n    return [...symbols];\n  }\n\n  getChainConfig(chainId: string): ChainConfig | undefined {\n    return this._configService.getChainConfigById(chainId);\n  }\n\n  getAvailableTokens(chainId: string): Token[] {\n    const chainConfig = this._configService.getChainConfigById(chainId);\n    let availableTokens: Token[] = [];\n    if (chainConfig) {\n      const routerConfigs = this._configService.getRouterConfigs();\n      const availableRouters = routerConfigs.filter(routerConfig => {\n        return routerConfig.srcChain === chainConfig.chainId;\n      })\n\n      const availableTokenAddresses = availableRouters.map(availableRouter => {\n        return availableRouter.srcToken;\n      })\n\n      availableTokens = chainConfig.tokens.filter(token => {\n        return availableTokenAddresses.includes(token.address);\n      })\n    }\n    return availableTokens;\n  }\n\n  getAllTradePairs(): TradePair[] {\n    const routerConfigs = this._configService.getRouterConfigs();\n    const tradePairs: TradePair[] = [];\n    routerConfigs.forEach(router => {\n      const srcChainConfig = this._configService?.getChainConfigById(router.srcChain);\n      const dstChainConfig = this._configService?.getChainConfigById(router.tgtChain);\n      if (dstChainConfig) {\n        const srcToken = srcChainConfig?.tokens.find(token => {\n          return token.address === router.srcToken;\n        });\n        const dstToken = dstChainConfig?.tokens.find(token => {\n          return token.address === router.tgtToken;\n        });\n\n        if (srcChainConfig && dstChainConfig && srcToken && dstToken) {\n          // if (srcChainConfig?.vm == dstChainConfig.vm\n          //   || (srcChainConfig?.vm == VMType.EVM && [VMType.LPRVM, VMType.ZKLITEVM, VMType.ZKSPVM].includes(dstChainConfig.vm))\n          //   || (dstChainConfig?.vm == VMType.EVM && [VMType.LPRVM, VMType.ZKLITEVM, VMType.ZKSPVM].includes(srcChainConfig.vm))\n          //   || [VMType.TVM, VMType.SOLANAVM, VMType.FUELVM].includes(srcChainConfig.vm)\n          // ) {\n          //   tradePairs.push({\n          //     srcChainId: router.srcChain,\n          //     dstChainId: router.tgtChain,\n          //     srcTokenSymbol: srcToken.symbol,\n          //     dstTokenSymbol: dstToken.symbol,\n          //     routerType: RouterType.EOA\n          //   })\n          // }\n          // if (router.endpointContract) {\n          //   tradePairs.push({\n          //     srcChainId: router.srcChain,\n          //     dstChainId: router.tgtChain,\n          //     srcTokenSymbol: srcToken.symbol,\n          //     dstTokenSymbol: dstToken.symbol,\n          //     routerType: RouterType.CONTRACT\n          //   })\n          // }\n          tradePairs.push({\n            srcChainId: router.srcChain,\n            dstChainId: router.tgtChain,\n            srcTokenSymbol: srcToken.symbol,\n            dstTokenSymbol: dstToken.symbol,\n          })\n        }\n      }\n    })\n\n    return tradePairs;\n  }\n\n  getAvailableTradePairs(srcChainId?: string, srcTokenSymbol?: string): TradePair[] {\n    const targetTradePairs: TradePair[] = this.getAllTradePairs().filter(tradePair => {\n      if (srcChainId && tradePair.srcChainId!=srcChainId) {\n        return false;\n      }\n      if (srcTokenSymbol && tradePair.srcTokenSymbol!=srcTokenSymbol) {\n        return false;\n      }\n      return true;\n    })\n\n    return targetTradePairs;\n  }\n\n  async getTransactionHistory(address: string, offset: number = 0): Promise<{\n    count: number,\n    rows: Transaction[],\n    offset: number,\n    limit: number\n  }> {\n    return await this._apiService.getTransactionHistory(address, offset);\n  }\n\n  async getTransactionStatus(hash: string, chainId?: string): Promise<{\n    chainId: string,\n    hash: string,\n    sender: string,\n    receiver: string,\n    amount: string,\n    symbol: string,\n    timestamp: string,\n    status: number,\n    opStatus: number,\n    targetId: string,\n    targetAmount: string,\n    targetSymbol: string,\n    targetChain: string\n  }> {\n    if (chainId?.includes(\"TON\")) {\n      // Patch: fix tonhash inconsistency issue\n      try {\n        hash = await getTonOrbiterHash(chainId, hash);\n      } catch (error) {\n        const e = error as Error;\n        console.error(`getTonOrbiterHash error ${e.message}`);\n      }\n    }\n    return await this._apiService.getTransactionStatus(hash);\n  }\n  async getUserOpoint(address: string): Promise<{\n    address: string,\n    summary: {\n      [key: string]: number\n    },\n    points: number\n  }> {\n    return await this._apiService.getUserOpoint(address);\n  }\n}\n","import { VMType } from \"@orbiter-finance/vm-core\";\nimport { ConfigService } from \"../config.service\";\nimport { EVMService } from \"./implement/evm.service\";\nimport { CAIROVMService } from \"./implement/cario.service\";\nimport { IMXVMService } from \"./implement/imx.service\";\nimport { LPRVMService } from \"./implement/lpr.service\";\nimport { SolanaVMService } from \"./implement/solana.service\";\nimport { TVMService } from \"./implement/t.service\";\nimport { ZKLITEVMService } from \"./implement/zklite.service\";\nimport { TRONVMService } from \"./implement/tron.service\";\nimport { BTCVMService } from \"./implement/btc.service\";\nimport { FUELVMService } from \"./implement/fuel.service\";\nimport { APTOSVMService } from \"./implement/aptos.service\";\nimport { SUIVMService } from \"./implement/sui.service\";\nimport { VMService } from \"./vm.service\";\n\nexport class VMServiceFactory {\n  private _services: { [key: string]: VMService } = {};\n  private configService: ConfigService;\n\n  constructor(configService: ConfigService) {\n    this.configService = configService;\n  }\n\n  getVMService(vmType: VMType): VMService | undefined {\n    if (!this._services[vmType]) {\n      return this.createVMService(vmType);\n    } else {\n      return this._services[vmType];\n    }\n  }\n\n  createVMService(vmType: VMType): VMService | undefined {\n    let service: VMService | undefined;\n    switch (vmType) {\n      case VMType.EVM:\n        service = new EVMService(this.configService);\n        break;\n      case VMType.IMXVM:\n        service = new IMXVMService(this.configService);\n        break;\n      case VMType.LPRVM:\n        service = new LPRVMService(this.configService);\n        break;\n      case VMType.SOLANAVM:\n        service = new SolanaVMService(this.configService);\n        break;\n      case VMType.CAIROVM:\n        service = new CAIROVMService(this.configService);\n        break;\n      case VMType.TVM:\n        service = new TVMService(this.configService);\n        break;\n      case VMType.ZKLITEVM:\n        service = new ZKLITEVMService(this.configService);\n        break;\n      case VMType.TRONVM:\n        service = new TRONVMService(this.configService);\n        break;\n      case VMType.BTCVM:\n        service = new BTCVMService(this.configService);\n        break;  \n      case VMType.FUELVM:\n        service = new FUELVMService(this.configService);\n        break;\n      case VMType.APTOSVM: \n        service = new APTOSVMService(this.configService);\n        break;\n      case VMType.SUIVM: \n        service = new SUIVMService(this.configService);\n        break;\n      default:\n        service = undefined;\n        break;\n    }\n    if (service) {\n      this._services[vmType] = service;\n    }\n    return service;\n  }\n\n}","import BigNumber from \"bignumber.js\";\nimport { hexlify, Interface, toUtf8Bytes, TransactionRequest } from \"ethers\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType, TransactionParams } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\nimport { ERC20_ABI } from \"../../../abi/erc20\";\nimport { Orbiter_V3_ABI_EVM } from \"../../../abi/orbiter\";\n\nexport class EVMService extends VMService {\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ): Promise<TransactionParams> {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n    if (routerType == RouterType.CONTRACT && !contractAddress) {\n      throw new Error('contractAddress is required');\n    }\n    \n    let transaction: TransactionRequest | undefined;\n    if (routerType === RouterType.EOA) {\n      if (srcAddress !== dstAddress) {\n        throw new Error(`EVM EOA transfer not support cross address transfer, srcAddress:${srcAddress}, dstAddress:${dstAddress}.`);\n      }\n      if (srcToken.isNative) {\n        transaction = {\n          to: makerAddress,\n          value: value,\n          data: '0x'\n        }\n      } else {\n        const _interface = new Interface(ERC20_ABI);\n        const recipient = makerAddress;\n        const amount = value;\n        const callData = _interface.encodeFunctionData(\"transfer\", [recipient, amount]);\n        transaction = {\n          to: srcToken.address,\n          data: callData,\n          value: '0'\n        }\n      }\n    } else if (routerType === RouterType.CONTRACT) {\n      const _interface = new Interface(Orbiter_V3_ABI_EVM);\n      const to = makerAddress;\n      const data = hexlify(toUtf8Bytes(channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`));\n      if (srcToken.isNative) {\n        const callData = _interface.encodeFunctionData(\"transfer\", [to, data]);\n        transaction = {\n          to: contractAddress,\n          data: callData,\n          value,\n        }\n      } else {\n        const token = srcToken.address;\n        const callData = _interface.encodeFunctionData(\"transferToken\", [token, to, value, data]);\n        transaction = {\n          to: contractAddress,\n          data: callData,\n          value: '0'\n        }\n      }\n    }\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: transaction\n    };\n  }\n\n  async createApprove(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string, value: string) {\n    const _interface = new Interface(ERC20_ABI);\n    const amount = value;\n    const callData = _interface.encodeFunctionData(\"approve\", [spenderAddress, amount]);\n    const transaction: TransactionRequest = {\n      to: approveToken.address,\n      data: callData,\n      value: '0'\n    }\n    return {\n      ownerAddress,\n      spenderAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** approveToken.decimals).toString(),\n      raw: transaction\n    };\n  }\n\n  async createAllowance(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string) {\n    const _interface = new Interface(ERC20_ABI);\n    const callData = _interface.encodeFunctionData(\"allowance\", [ownerAddress, spenderAddress]);\n    const transaction: TransactionRequest = {\n      to: approveToken.address,\n      data: callData,\n      value: '0'\n    }\n    return transaction;\n  }\n}","import { Token } from \"../api-service/api.interface\"\nimport { ConfigService } from \"../config.service\";\nimport { ApproveParams, RouterType, TransactionParams } from \"../orbiter.interface\";\n\nexport class VMService {\n  private readonly _configService: ConfigService;\n\n  constructor(configService: ConfigService) {\n    this._configService = configService;\n  }\n\n  isValidTransferType(routerType: RouterType): boolean {\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ): Promise<TransactionParams> {\n    throw new Error(`createTransfer need implement, params: \n    srcAddress: ${srcAddress}, srcToken: ${JSON.stringify(srcToken)}, dstAddress: ${dstAddress}, dstToken: ${JSON.stringify(dstToken) }, value: ${value}, vc: ${vc}, \n    routerType: ${routerType}, makerAddress: ${makerAddress}, chainId: ${chainId}, contractAddress: ${contractAddress}, channelId: ${channelId}`);\n  };\n\n  async createApprove(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string, value: string): Promise<ApproveParams> {\n    throw new Error(`createApprove need implement, params: \n      ownerAddress: ${ownerAddress}, spenderAddress: ${spenderAddress}, approveToken: ${JSON.stringify(approveToken)}, value: ${value}, chainId: ${chainId}`);\n  }\n\n  async createAllowance(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string): Promise<unknown> {\n    throw new Error(`checkAllowance need implement, params: \n      ownerAddress: ${ownerAddress}, spenderAddress: ${spenderAddress}, approveToken: ${JSON.stringify(approveToken)}, chainId: ${chainId}`);\n  }\n}","const ERC20_ABI = [\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n\nconst ZETA_ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name_\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"symbol_\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"decimals_\",\n        \"type\": \"uint8\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"chainid_\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"enum CoinType\",\n        \"name\": \"coinType_\",\n        \"type\": \"uint8\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"gasLimit_\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"systemContractAddress_\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"CallerIsNotFungibleModule\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"GasFeeTransferFailed\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"InvalidSender\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"LowAllowance\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"LowBalance\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"ZeroAddress\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"ZeroGasCoin\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"ZeroGasPrice\",\n    \"type\": \"error\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"bytes\",\n        \"name\": \"from\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Deposit\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"UpdatedGasLimit\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"protocolFlatFee\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"UpdatedProtocolFlatFee\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"systemContract\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"UpdatedSystemContract\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bytes\",\n        \"name\": \"to\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"gasfee\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"protocolFlatFee\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Withdrawal\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"CHAIN_ID\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"COIN_TYPE\",\n    \"outputs\": [\n      {\n        \"internalType\": \"enum CoinType\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"FUNGIBLE_MODULE_ADDRESS\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"GAS_LIMIT\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"PROTOCOL_FLAT_FEE\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"SYSTEM_CONTRACT_ADDRESS\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"burn\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"deposit\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"gasLimit\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"updateGasLimit\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"protocolFlatFee\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"updateProtocolFlatFee\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"addr\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"updateSystemContractAddress\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"to\",\n        \"type\": \"bytes\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"withdrawGasFee\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n\nconst STARKNET_ERC20_ABI = [\n  {\n    \"members\": [\n      {\n        \"name\": \"low\",\n        \"offset\": 0,\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"high\",\n        \"offset\": 1,\n        \"type\": \"felt\"\n      }\n    ],\n    \"name\": \"Uint256\",\n    \"size\": 2,\n    \"type\": \"struct\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"name\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"symbol\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"name\": \"constructor\",\n    \"outputs\": [],\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"name\": \"name\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"name\": \"symbol\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"name\": \"totalSupply\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"name\": \"decimals\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"spender\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"name\": \"remaining\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"added_value\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"increaseAllowance\",\n    \"outputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"spender\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"subtracted_value\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"decreaseAllowance\",\n    \"outputs\": [\n      {\n        \"name\": \"success\",\n        \"type\": \"felt\"\n      }\n    ],\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"user\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"Uint256\"\n      }\n    ],\n    \"name\": \"burn\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  }\n]\n\nexport {\n  ERC20_ABI,\n  ZETA_ERC20_ABI,\n  STARKNET_ERC20_ABI\n}","const Orbiter_V3_ABI_EVM = [{\n  \"anonymous\": false,\n  \"inputs\": [{ \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, {\n    \"indexed\": false,\n    \"internalType\": \"uint256\",\n    \"name\": \"amount\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"Transfer\",\n  \"type\": \"event\"\n}, {\n  \"inputs\": [{ \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"data\",\n    \"type\": \"bytes\"\n  }], \"name\": \"transfer\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\"\n}, {\n  \"inputs\": [{ \"internalType\": \"contract IERC20\", \"name\": \"token\", \"type\": \"address\" }, {\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, { \"internalType\": \"uint256\", \"name\": \"value\", \"type\": \"uint256\" }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"data\",\n    \"type\": \"bytes\"\n  }], \"name\": \"transferToken\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"contract IERC20\",\n    \"name\": \"token\",\n    \"type\": \"address\"\n  }, { \"internalType\": \"address[]\", \"name\": \"tos\", \"type\": \"address[]\" }, {\n    \"internalType\": \"uint256[]\",\n    \"name\": \"values\",\n    \"type\": \"uint256[]\"\n  }], \"name\": \"transferTokens\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\"\n}, {\n  \"inputs\": [\n    { \"internalType\": \"address[]\", \"name\": \"tos\", \"type\": \"address[]\" }, {\n      \"internalType\": \"uint256[]\",\n      \"name\": \"values\",\n      \"type\": \"uint256[]\"\n    }], \"name\": \"transfers\", \"outputs\": [], \"stateMutability\": \"payable\", \"type\": \"function\"\n}];\n\nconst Orbiter_V4_ABI_EVM = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"target\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"AddressEmptyCode\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"AddressInsufficientBalance\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"FailedInnerCall\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"SafeERC20FailedOperation\",\n    \"type\": \"error\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bytes\",\n        \"name\": \"data\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"TransferTo\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"TransferTo\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"extra\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"extra\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"transferToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tos\",\n        \"type\": \"address[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"values\",\n        \"type\": \"uint256[]\"\n      },\n      {\n        \"internalType\": \"bytes[]\",\n        \"name\": \"extras\",\n        \"type\": \"bytes[]\"\n      }\n    ],\n    \"name\": \"transferTokens\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tos\",\n        \"type\": \"address[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"values\",\n        \"type\": \"uint256[]\"\n      }\n    ],\n    \"name\": \"transferTokens\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tos\",\n        \"type\": \"address[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"values\",\n        \"type\": \"uint256[]\"\n      }\n    ],\n    \"name\": \"transfers\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tos\",\n        \"type\": \"address[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"values\",\n        \"type\": \"uint256[]\"\n      },\n      {\n        \"internalType\": \"bytes[]\",\n        \"name\": \"extras\",\n        \"type\": \"bytes[]\"\n      }\n    ],\n    \"name\": \"transfers\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  }\n]\n\nconst Orbiter_V3_ABI_STARKNET = [\n  {\n    \"members\": [\n      {\n        \"name\": \"low\",\n        \"offset\": 0,\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"high\",\n        \"offset\": 1,\n        \"type\": \"felt\"\n      }\n    ],\n    \"name\": \"Uint256\",\n    \"size\": 2,\n    \"type\": \"struct\"\n  },\n  {\n    \"data\": [\n      {\n        \"name\": \"to\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"Uint256\"\n      },\n      {\n        \"name\": \"token\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"ext_len\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"ext\",\n        \"type\": \"felt*\"\n      }\n    ],\n    \"keys\": [],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"name\": \"_token\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"_to\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"_amount\",\n        \"type\": \"Uint256\"\n      },\n      {\n        \"name\": \"_ext_len\",\n        \"type\": \"felt\"\n      },\n      {\n        \"name\": \"_ext\",\n        \"type\": \"felt*\"\n      }\n    ],\n    \"name\": \"transferERC20\",\n    \"outputs\": [],\n    \"type\": \"function\"\n  }\n]\n\n\nexport {\n  Orbiter_V3_ABI_EVM,\n  Orbiter_V4_ABI_EVM,\n  Orbiter_V3_ABI_STARKNET,\n}","import BigNumber from \"bignumber.js\";\nimport { Contract, shortString, uint256 } from \"starknet\";\nimport { Orbiter_V3_ABI_STARKNET } from \"../../../abi/orbiter\";\nimport { STARKNET_ERC20_ABI } from \"../../../abi/erc20\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class CAIROVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.EOA) {\n      return false;\n    }\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n    if (!contractAddress) {\n      throw new Error('contractAddress is required');\n    }\n      const amount = uint256.bnToUint256(value);\n\n      const tokenContract = new Contract(STARKNET_ERC20_ABI, srcToken.address);\n      const approveCall = tokenContract.populate('approve', [\n          contractAddress,\n          amount\n      ]);\n\n    const contract = new Contract(Orbiter_V3_ABI_STARKNET, contractAddress);\n    const data = (channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`);\n    const ext = shortString.splitLongString(data).map((item) => shortString.encodeShortString(item));\n    const call = contract.populate('transferERC20', [srcToken.address, makerAddress, amount, ext]);\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: [approveCall, call]\n    };\n  }\n\n  async createApprove(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string, value: string) {\n    const contract = new Contract(STARKNET_ERC20_ABI, approveToken.address);\n    const amount = uint256.bnToUint256(value);\n    const call = contract.populate('approve', [spenderAddress, amount]);\n    return {\n      ownerAddress,\n      spenderAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** approveToken.decimals).toString(),\n      raw: call\n    };\n  }\n\n  async createAllowance(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string) {\n    const contract = new Contract(STARKNET_ERC20_ABI, approveToken.address);\n    const call = contract.populate('allowance', [ownerAddress, spenderAddress]);\n    return call;\n  }\n}\n","import BigNumber from \"bignumber.js\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class IMXVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n    if (srcAddress !== dstAddress) {\n      throw new Error(`IMX not support cross address tranfer.`)\n    }\n\n    const call = (channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`);\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: call\n    };\n  }\n}","import BigNumber from \"bignumber.js\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class LPRVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n\n    const call = (channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`);\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: call\n    };\n  }\n}","import BigNumber from \"bignumber.js\";\nimport { hexlify, toUtf8Bytes } from \"ethers\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { createTransferInstruction, getAssociatedTokenAddress, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class SolanaVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n  \n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n\n    const srcAddressPublicKey = new PublicKey(srcAddress);\n    const srcTokenPublicKey = new PublicKey(srcToken.address);\n    const makerAddressPublicKey = new PublicKey(makerAddress);\n    const srcAddressTokenAccount = await getAssociatedTokenAddress(\n      srcTokenPublicKey,\n      srcAddressPublicKey,\n    );\n    const makerAddressTokenAccount = await getAssociatedTokenAddress(\n      srcTokenPublicKey,\n      makerAddressPublicKey,\n      true\n    );\n\n    const transaction = new Transaction()\n      .add(\n        createTransferInstruction(\n          srcAddressTokenAccount,\n          makerAddressTokenAccount,\n          srcAddressPublicKey,\n          Number(value),\n          [],\n          TOKEN_PROGRAM_ID\n        )\n      )\n      .add(\n        new TransactionInstruction({\n          keys: [{ pubkey: srcAddressPublicKey, isSigner: true, isWritable: true }],\n          data: Buffer.from(hexlify(toUtf8Bytes(channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`)), 'utf-8'),\n          programId: new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'),\n        })\n      )\n    \n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: transaction\n    };\n  }\n}","import BigNumber from \"bignumber.js\";\nimport TonWeb from \"tonweb\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class TVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n  \n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n\n    const data = channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`;\n    const srcTonAddress = new TonWeb.Address(srcAddress)\n    const makerTonAddress = new TonWeb.Address(makerAddress)\n\n    const forwardPayload = new TonWeb.boc.Cell();\n    forwardPayload.bits.writeUint(0, 128);\n    forwardPayload.bits.writeString(data);\n\n    if(srcToken.isNative) {\n      return {\n        srcAddress,\n        dstAddress,\n        value,\n        amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n        raw: forwardPayload,\n      };\n    } else {\n      const queryId = new Date().getHours() * 3600 + new Date().getMinutes() * 60 + new Date().getSeconds();\n      const jettonTransferBody = new TonWeb.boc.Cell();\n      jettonTransferBody.bits.writeUint(0xf8a7ea5, 32);\n      jettonTransferBody.bits.writeUint(queryId, 64);\n      jettonTransferBody.bits.writeCoins(new TonWeb.utils.BN(value));\n      jettonTransferBody.bits.writeAddress(makerTonAddress);\n      jettonTransferBody.bits.writeAddress(srcTonAddress);\n      jettonTransferBody.bits.writeBit(false);\n      jettonTransferBody.bits.writeCoins(TonWeb.utils.toNano('0'));\n      jettonTransferBody.bits.writeBit(true);\n      jettonTransferBody.refs.push(forwardPayload);\n\n      const payloadBase64 = TonWeb.utils.bytesToBase64(\n        await jettonTransferBody.toBoc(false)\n      )\n      return {\n        srcAddress,\n        dstAddress,\n        value,\n        amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n        raw: payloadBase64\n      };\n    }\n  }\n}","import BigNumber from \"bignumber.js\";\nimport { Token } from \"../../api-service/api.interface\";\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class ZKLITEVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n    if (srcAddress !== dstAddress) {\n      throw new Error(`ZKSync Lite not support cross address tranfer.`);\n    }\n\n    let call = channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`;\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: call\n    };\n  }\n}","import { TronWeb, Types as TronTypes, BigNumber } from \"tronweb\";\nimport { Token } from \"../../api-service/api.interface\";\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class TRONVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.EOA) {\n      return false;\n    }\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n    if (!contractAddress) {\n      throw new Error('contractAddress is required');\n    }\n\n    const url = this.getUrl(chainId);\n    if (!url) {\n      throw new Error(`Unsupported Tron chainId: ${chainId}`);\n    }\n    const tronWeb = new TronWeb({\n      fullHost: url\n    });\n\n    const callData = channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`;\n    const bytesData = tronWeb.toHex(callData);\n\n    const functionSelector = 'transferToken(address,address,uint256,bytes)';\n    const params: TronTypes.ContractFunctionParameter[] = [\n      {type: 'address', value: srcToken.address},\n      {type: 'address', value: makerAddress},\n      {type: 'uint256', value: value},\n      {type: 'bytes', value: bytesData}\n    ];\n\n    const transaction = await tronWeb.transactionBuilder.triggerSmartContract(\n      contractAddress,\n      functionSelector,\n      {\n        txLocal: true\n      },\n      params,\n      srcAddress\n    );\n\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: transaction\n    };\n  }\n\n  async createApprove(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string, value: string) {\n    const url = this.getUrl(chainId);\n    if (!url) {\n      throw new Error(`Unsupported Tron chainId: ${chainId}`);\n    }\n    const tronWeb = new TronWeb({\n      fullHost: url\n    });\n\n    const functionSelector = 'approve(address,uint256)';\n    const params: TronTypes.ContractFunctionParameter[] = [\n      {type: 'address', value: spenderAddress},\n      {type: 'uint256', value: value}\n    ];\n\n    const transaction = await tronWeb.transactionBuilder.triggerSmartContract(\n      approveToken.address,\n      functionSelector,\n      {\n        txLocal: true\n      },\n      params,\n      ownerAddress\n    );\n\n    return {\n      ownerAddress,\n      spenderAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** approveToken.decimals).toString(),\n      raw: transaction\n    };\n  }\n\n  async createAllowance(ownerAddress: string, spenderAddress: string, approveToken: Token, chainId: string) {\n    const url = this.getUrl(chainId);\n    if (!url) {\n      throw new Error(`Unsupported Tron chainId: ${chainId}`);\n    }\n    const tronWeb = new TronWeb({\n      fullHost: url\n    });\n\n    const functionSelector = 'allowance(address,address)';\n    const params: TronTypes.ContractFunctionParameter[] = [\n      {type: 'address', value: ownerAddress},\n      {type: 'address', value: spenderAddress}\n    ];\n\n    const transaction = await tronWeb.transactionBuilder.triggerSmartContract(\n      approveToken.address,\n      functionSelector,\n      {\n        txLocal: true\n      },\n      params,\n      ownerAddress\n    );\n\n    return transaction;\n  }\n\n  getUrl(chainId: string) {\n    let url: string | undefined;\n    if (chainId === '3448148188') {\n      url = 'https://nile.trongrid.io';\n    } else if(chainId === '728126428') {\n      url = 'https://api.trongrid.io';\n    } else if (chainId === '2494104990') {\n      url = 'https://api.shasta.trongrid.io';\n    }\n    return url;\n  }\n}","import BigNumber from \"bignumber.js\";\nimport * as bitcoin from \"bitcoinjs-lib\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class BTCVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n  \n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n\n    //only support native currency\n    if(!srcToken.isNative) {\n      throw new Error('only support native currency');\n    };\n    const psbt = new bitcoin.Psbt();\n    psbt.addOutput({\n      address: makerAddress,\n      value: Number(value)\n    });\n    const callDataBuffer = bitcoin.payments.embed({\n      data: [Buffer.from((channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`), 'utf-8')],\n    }).output;\n    if (!callDataBuffer) {\n      throw new Error('create callDataBuffer failed');\n    }\n    psbt.addOutput({\n      script: callDataBuffer,\n      value: 0,\n    });\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: psbt\n    };\n  }\n}","import BigNumber from \"bignumber.js\";\nimport { hexlify, toUtf8Bytes } from \"ethers\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class FUELVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.CONTRACT) {\n      return false;\n    }\n    return true;\n  }\n\n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n    \n    const hexCall = hexlify(toUtf8Bytes(channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`));\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: hexCall\n    };\n  }\n}","import BigNumber from \"bignumber.js\";\nimport { hexlify, toUtf8Bytes } from \"ethers\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class APTOSVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.EOA) {\n      return false;\n    }\n    return true;\n  }\n  \n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n\n    const hexCall = hexlify(toUtf8Bytes(channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`));\n    const requestData = {\n      function: `${contractAddress}::message::transfer_token`,\n      typeArguments: [\n        srcToken.address,\n      ],\n      functionArguments: [\n        makerAddress,\n        Number(value),\n        hexCall,\n      ]\n    };\n\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: requestData\n    };\n  }\n}","import BigNumber from \"bignumber.js\";\nimport { hexlify, toUtf8Bytes } from \"ethers\";\nimport { Token } from \"../../api-service/api.interface\"\nimport { RouterType } from \"../../orbiter.interface\";\nimport { VMService } from \"../vm.service\";\n\nexport class SUIVMService extends VMService {\n  isValidTransferType(routerType: RouterType): boolean {\n    if(routerType == RouterType.EOA) {\n      return false;\n    }\n    return true;\n  }\n  \n  async createTransaction(srcAddress: string, srcToken: Token,  dstAddress: string, dstToken: Token, value: string, vc: string,\n    routerType: RouterType, makerAddress: string, chainId: string, contractAddress?: string, channelId?: string\n  ) {\n    if(!this.isValidTransferType(routerType)) {\n      throw new Error(`not support for router type: ${routerType}`);\n    }\n\n    const hexCall = hexlify(toUtf8Bytes(channelId ? `c=${vc}&t=${dstAddress}&app=${channelId}` : `c=${vc}&t=${dstAddress}`));\n    return {\n      srcAddress,\n      dstAddress,\n      value,\n      amount: new BigNumber(value).div(10 ** srcToken.decimals).toString(),\n      raw: hexCall\n    };\n  }\n}","import { VMType } from \"@orbiter-finance/vm-core\";\n\nexport interface APIResponse<T> {\n  status: string;\n  message: string;\n  result: T;\n}\n\nexport interface ChainConfig {\n  chainId: string;\n  networkId: string;\n  internalId: number;\n  name: string;\n  nativeCurrency: Token;\n  tokens: Token[];\n  contracts: Contract[];\n  vm: VMType;\n}\n\nexport interface Token {\n  name: string;\n  symbol: string;\n  decimals: number;\n  coinKey: string;\n  address: string;\n  isNative?: boolean;\n}\n\nexport interface Contract {\n  name: string;\n  address: string;\n}\n\nexport interface RouterConfig {\n  line: string;\n  endpoint: string;\n  endpointContract?: string;\n  srcChain: string;\n  tgtChain: string;\n  srcToken: string;\n  tgtToken: string;\n  maxAmt: string;\n  minAmt: string;\n  tradeFee: string;\n  withholdingFee: string;\n  vc: string;\n  state: RouterState;\n  compRatio: number;\n  spentTime: number;\n  tieredFee: TieredFee[];\n}\n\nexport interface TieredFee {\n  range: [number, number];\n  tradeFee: number;\n  withholdingFee: number;\n}\n\nexport enum RouterState {\n  AVAILABLE = 'available',\n  DISABLED = \"disabled\"\n}\n\nexport interface Transaction {\n  sourceId: string;\n  targetId: string;\n  sourceChain: string;\n  targetChain: string;\n  sourceAmount: string;\n  sourceMaker: string;\n  sourceAddress: string;\n  targetAddress: string;\n  sourceSymbol: string;\n  targetSymbol: string;\n  status: number;\n  sourceTime: string;\n  targetTime: string;\n  points?: string;\n}\n\nexport interface PointRule {\n  [chain: string] : {\n    [symbol: string]: string\n  }\n}","import { ApiService } from \"./api-service/api.service\";\nimport { TradePair } from \"./orbiter.interface\";\nimport { ChainConfig, PointRule, RouterConfig, RouterState } from \"./api-service/api.interface\";\n\nexport class ConfigService {\n  public readonly apiKey?: string;\n  public readonly dealerId?: string;\n  public readonly channelId?: string;\n  private readonly _apiService: ApiService;\n  private _chainConfigs?: ChainConfig[];\n  private _routerConfigs?: RouterConfig[];\n  private _basePointRules?: PointRule;\n  private _tokens?: string[];\n\n  constructor(apiService: ApiService) {\n    this._apiService = apiService;\n  }\n\n  async initConfig() {\n    try {\n      const chainConfigs = await this._apiService.getChainList();\n      this._chainConfigs = chainConfigs;\n    } catch (error) {\n      const e = error as Error;\n      throw new Error(`init chainConfigs fail, error: ${e.message}, stack: ${e.stack}`);\n    }\n    try {\n      const routerConfigs = await this._apiService.getRouterList(this.dealerId);\n      this._routerConfigs = routerConfigs.filter(routerConfig => {\n        return routerConfig.state === RouterState.AVAILABLE;\n      });\n    } catch (error) {\n      const e = error as Error;\n      throw new Error(`init routerConfigs fail, error: ${e.message}, stack: ${e.stack}`);\n    }\n    try {\n      const basePointRules = await this._apiService.getBasePointRules();\n      this._basePointRules = basePointRules;\n    } catch (error) {\n      const e = error as Error;\n      console.error(`init basePointRules fail, error: ${e.message}`);\n      this._basePointRules = {};\n    }\n  }\n\n  getRouterConfigs() {\n    if (!this._routerConfigs) {\n      throw new Error(`getRouterConfigs fail, error: config need init.`);\n    }\n    return this._routerConfigs;\n  }\n\n  getRouterConfig(tradePair: TradePair): RouterConfig | undefined {\n    if (!this._routerConfigs) {\n      throw new Error(`getRouterConfig fail, error: config need init.`);\n    }\n    const line = `${tradePair.srcChainId}/${tradePair.dstChainId}-${tradePair.srcTokenSymbol}/${tradePair.dstTokenSymbol}`;\n\n    return this._routerConfigs.find(router => {\n      return router.line === line;\n    })\n  }\n\n  getChainConfigs(): ChainConfig[] {\n    if (!this._chainConfigs) {\n      throw new Error(`getChainConfigs fail, error: config need init.`);\n    }\n\n    return this._chainConfigs;\n  }\n\n  getChainConfigByName(chainName: string): ChainConfig | undefined {\n    if (!this._chainConfigs) {\n      throw new Error(`getChainConfigByName fail, error: config need init.`);\n    }\n\n    const chainConfig = this._chainConfigs.find(chainConfig => {\n      return chainConfig.name === chainName;\n    })\n\n    return chainConfig;\n  }\n\n  getChainConfigById(chainId: string): ChainConfig | undefined {\n    if (!this._chainConfigs) {\n      throw new Error(`getChainConfigById fail, error: config need init.`);\n    }\n\n    const chainConfig = this._chainConfigs.find(chainConfig => {\n      return chainConfig.chainId === chainId;\n    })\n\n    return chainConfig;\n  }\n\n  getBasePointRule(chainId: string, symbol: string) {\n    if(!this._basePointRules) {\n      throw new Error(`getBasePointRule fail, error: config need init.`);\n    }\n    const chainRules = this._basePointRules[chainId];\n    let basePoint = '0';\n    if(chainRules) {\n      basePoint = chainRules[symbol] || '0';\n    }\n    return basePoint;\n  }\n};\n","import { ENDPOINT, CDNENDPOINT } from \"../orbiter.interface\";\nimport { APIResponse, ChainConfig, PointRule, RouterConfig, Token } from \"./api.interface\";\n\nexport class ApiService {\n  private apiEndpoint: ENDPOINT;\n  private cdnEndpoint: CDNENDPOINT;\n  private apiKey?: string;\n  private channelId?: string;\n  constructor(apiEndpoint: ENDPOINT, apiKey?: string, channelId?: string) {\n    this.apiEndpoint = apiEndpoint;\n    this.apiKey = apiKey;\n    this.channelId = channelId;\n    if(apiEndpoint == ENDPOINT.MAINNET) {\n      this.cdnEndpoint = CDNENDPOINT.MAINNET\n    } else {\n      this.cdnEndpoint = CDNENDPOINT.TESTNET\n    }\n  }\n\n  private async fetchAPIGet<T>(path: string, params?: Record<string, any>): Promise<T> {\n    const url = new URL(`${this.apiEndpoint}${path}`);\n    if (params) {\n      Object.keys(params).forEach(key => {\n        const param = params[key];\n        if (param) {\n          url.searchParams.append(key, param);\n        }\n      });\n    }\n\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n    };\n    headers['X-Channel'] = 'bridge-sdk';\n    if (this.apiKey) headers['X-API-Key'] = this.apiKey;\n    if (this.channelId) headers['X-Channel-ID'] = this.channelId;\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n\n    const data: APIResponse<T> = await response.json();\n    if (data.status !== 'success') {\n      throw new Error(data.message);\n    }\n\n    return data.result;\n  }\n\n  private async fetchCDNGet<T>(path: string): Promise<T> {\n    const url = new URL(`${this.cdnEndpoint}${path}`);\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n    };\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n\n    const data = await response.json() as T;\n    return data;\n  }\n\n  async getChainList(): Promise<ChainConfig[]> {\n    let chainConfigs: ChainConfig[] = [];\n    try {\n      chainConfigs = await this.fetchAPIGet<ChainConfig[]>('/chains');\n    } catch(error) {\n      console.log(`getChainList From API Fail, will try cdn backup`);\n      chainConfigs = await this.fetchCDNGet<ChainConfig[]>('/chains.json');\n    }\n    return chainConfigs;\n  }\n\n  async getTokenList(): Promise<Record<string, Token[]>> {\n    return await this.fetchAPIGet<Record<string, Token[]>>('/tokens');\n  }\n\n  async getRouterList(dealerId?: string): Promise<RouterConfig[]> {\n    const entry = \"contract\";\n    let routers: RouterConfig[] = [];\n    try {\n      routers = await this.fetchAPIGet<RouterConfig[]>('/routers/v2', dealerId ? { dealerId, entry } : { entry });\n    } catch(error) {\n      console.log(`getRouterList From API Fail, will try cdn backup`);\n      routers = await this.fetchCDNGet<RouterConfig[]>('/routers.json');\n    }\n    return routers;\n  }\n\n  async getBasePointRules(): Promise<PointRule> {\n    return await this.fetchAPIGet<PointRule>('/routers/base-point');\n  }\n\n  async getSimulatedReceiveAmount(\n    line: string,\n    value: string,\n    nonce?: string,\n    dealer?: string,\n    brokerageTradeFeeRate?: number\n  ): Promise<{ receiveAmount: string; router: RouterConfig }> {\n    return await this.fetchAPIGet<{ receiveAmount: string; router: RouterConfig }>('/routers/simulation/receiveAmount', {\n      line,\n      value,\n      nonce,\n      dealer,\n      brokerageTradeFeeRate,\n    });\n  }\n\n  async getTransactionHistory(address: string, offset?: number): Promise<any> {\n    return await this.fetchAPIGet<any>('/transaction/history', { address, offset });\n  }\n\n  async getTransactionStatus(hash: string): Promise<any> {\n    return await this.fetchAPIGet<any>(`/transaction/status/${hash}`);\n  }\n\n  async getUserOpoint(address: string): Promise<any> {\n    return await this.fetchAPIGet<any>(`/opoints/user/${address}`);\n  }\n}\n\n","import BigNumber from \"bignumber.js\";\nimport { isValidAddress } from \"@orbiter-finance/vm-core\";\nimport { padStart } from \"../utils/tools\";\nimport { ChainConfig, RouterConfig, Token } from \"./api-service/api.interface\"\nimport { ApproveParams, RouterType, TransactionParams } from \"./orbiter.interface\";\nimport { VMService } from \"./vm-service/vm.service\";\n\nexport class Router {\n  constructor(\n    public readonly srcChainConfig: ChainConfig,\n    public readonly srcToken: Token,\n    public readonly dstChainConfig: ChainConfig,\n    public readonly dstToken: Token,\n    public readonly basePoint: string,\n    private readonly _VMService: VMService,\n    public readonly routerConfig: RouterConfig,\n    public readonly routerType: RouterType,\n    private readonly _channelId?: string,\n  ) { }\n  get routerId() {\n    return `${this.routerType}-${this.srcChainConfig.chainId}-${this.srcToken.symbol}-${this.dstChainConfig.chainId}-${this.dstToken.symbol}`\n  }\n\n  get vc() {\n    return this.dstChainConfig.internalId.toString();\n  }\n\n  get withholdingFee() {\n    return this.routerConfig.withholdingFee;\n  }\n\n  get tradeFee() {\n    return this.routerConfig.tradeFee;\n  }\n\n  get makerAddress() {\n    const address = this.routerConfig?.endpoint;\n    if (!address) {\n      throw new Error(`getMakerAddress fail`);\n    }\n    return address;\n  }\n\n  get contractAddress() {\n    return this.routerConfig.endpointContract;\n  }\n\n  get spentTime() {\n    return this.routerConfig.spentTime;\n  }\n\n  private _getAmountWithVc(amount: string) {\n    const value = new BigNumber(amount).multipliedBy(10 ** this.srcToken.decimals).toFixed(0);\n    const vc = this.vc;\n    if (value.length <= vc.length) {\n      throw new Error(`value length too short`);\n    }\n    const header = value.slice(0, value.length - vc.length);\n    const valueWithVc = header + vc;\n    return new BigNumber(valueWithVc).div(10 ** this.srcToken.decimals).toFixed();\n  }\n\n  async createTransaction(srcAddress: string, dstAddress: string, amount: string): Promise<TransactionParams> {\n    const value = new BigNumber(amount).multipliedBy(10 ** this.srcToken.decimals).toFixed(0);\n\n    if (!await isValidAddress(srcAddress, this.srcChainConfig.vm)) {\n      throw new Error(`srcAddress format error: ${srcAddress}`);\n    }\n    // if (!await isValidAddress(dstAddress, this.dstChainConfig.vm)) {\n    //   throw new Error(`dstAddress format error: ${dstAddress}`);\n    // }\n\n    const vc = this.vc;\n    return await this._VMService.createTransaction(srcAddress, this.srcToken, dstAddress, this.dstToken, value, vc, this.routerType, this.makerAddress, this.srcChainConfig.chainId, this.contractAddress, this._channelId);\n  }\n\n  async createApprove(ownerAddress: string, amount: string): Promise<ApproveParams> {\n    const value = new BigNumber(amount).multipliedBy(10 ** this.srcToken.decimals).toFixed(0);\n\n    if (this.routerType === RouterType.EOA) {\n      throw new Error(`EOA Transfer no need approve.`);\n    }\n    const spenderAddress = this.contractAddress;\n    if (!spenderAddress) {\n      throw new Error(`createApprove fail, unavailable target contract address.`);\n    }\n\n    if (!await isValidAddress(ownerAddress, this.srcChainConfig.vm)) {\n      throw new Error(`ownerAddress format error: ${ownerAddress}`);\n    }\n    if (!await isValidAddress(spenderAddress, this.srcChainConfig.vm)) {\n      throw new Error(`spenderAddress format error: ${spenderAddress}`);\n    }\n\n    return this._VMService.createApprove(ownerAddress, spenderAddress, this.srcToken, this.srcChainConfig.chainId, value);\n  }\n\n  async createAllowance(ownerAddress: string) {\n    if (this.routerType === RouterType.EOA) {\n      throw new Error(`EOA Transfer no need approve.`);\n    }\n    const spenderAddress = this.contractAddress;\n    if (!spenderAddress) {\n      throw new Error(`createAllowance fail, unavailable target contract address.`);\n    }\n    if (!await isValidAddress(ownerAddress, this.srcChainConfig.vm)) {\n      throw new Error(`ownerAddress format error: ${ownerAddress}`);\n    }\n    if (!await isValidAddress(spenderAddress, this.srcChainConfig.vm)) {\n      throw new Error(`spenderAddress format error: ${spenderAddress}`);\n    }\n\n    return this._VMService.createAllowance(ownerAddress, spenderAddress, this.srcToken, this.srcChainConfig.chainId);\n  }\n\n  getMinSendAmountMinusWithHoldingFee() {\n    const minAmt = new BigNumber(this.routerConfig.minAmt);\n    const withholdingFee = new BigNumber(this.routerConfig.withholdingFee);\n    return minAmt.minus(withholdingFee).toFixed();\n  }\n\n  getMinSendAmount() {\n    return this.routerConfig.minAmt;\n  }\n\n  getMaxSendAmount() {\n    return this.routerConfig.maxAmt;\n  }\n\n  simulationAmountPlusWithHoldingFee(amount: string) {\n    let amountBigNumber = new BigNumber(amount);\n    if (this.routerType == RouterType.EOA) {\n      amountBigNumber = new BigNumber(this._getAmountWithVc(amount));\n    }\n    //minAmt needs minus withHolding fee\n    const minAmt = new BigNumber(this.getMinSendAmountMinusWithHoldingFee());\n    const maxAmt = new BigNumber(this.getMaxSendAmount());\n    if (amountBigNumber.lt(minAmt) || amountBigNumber.gt(maxAmt.multipliedBy(1.1))) { // 10% endurance rate\n      throw new Error(`amount ${amount} is not in the allow scale: min: ${this.routerConfig.minAmt} max: ${this.routerConfig.maxAmt}`);\n    }\n\n    let tradeFeeRate = new BigNumber(this.tradeFee);\n    let withholdingFee = new BigNumber(this.withholdingFee);\n    const originWithholdingFee = withholdingFee;\n    if (this.routerConfig.tieredFee) {\n      const subWithholdingFeeAmount = amountBigNumber.minus(withholdingFee).toNumber();\n      const item = this.routerConfig.tieredFee.find(row => subWithholdingFeeAmount > row.range[0] && subWithholdingFeeAmount <= row.range[1]);\n      if (item) {\n        if (item.tradeFee != undefined) {\n          tradeFeeRate = new BigNumber(item.tradeFee);\n        }\n        if (item.withholdingFee != undefined) {\n          withholdingFee = new BigNumber(item.withholdingFee);\n        }\n      }\n    }\n\n    const tFee = new BigNumber(originWithholdingFee)\n      .minus(withholdingFee)\n      .multipliedBy(tradeFeeRate)\n      .dividedBy(100).toString()\n    withholdingFee = new BigNumber(this.routerConfig.withholdingFee).minus(tFee);\n\n    // plus withHolding fee\n    amountBigNumber = amountBigNumber.plus(withholdingFee);\n    const nonce = '0';//to avoid receive value over mini value\n    const safeLength = this._getTargetAmountSafeLengthByToken(this.dstToken.symbol, this.dstToken.decimals);\n    const targetNonce = padStart(nonce.substring(nonce.length - safeLength), safeLength, '0');\n    const result = this._getResponseIntent(amountBigNumber.toString(), '0', tradeFeeRate.toNumber(), 0, withholdingFee.toString(), targetNonce, this.dstToken.decimals - safeLength);\n\n    const sendAmount = amountBigNumber.toFixed();\n    const receiveAmount = new BigNumber(result.responseAmount).toFixed();\n    return {\n      sendAmount,\n      receiveAmount\n    };\n  }\n\n  simulationAmount(amount: string) {\n    let amountBigNumber = new BigNumber(amount);\n    if (this.routerType === RouterType.EOA) {\n      amountBigNumber = new BigNumber(this._getAmountWithVc(amount));\n    }\n\n    if (amountBigNumber.lt(Number(this.routerConfig.minAmt)) || amountBigNumber.gt(Number(this.routerConfig.maxAmt) * 1.1)) { // 10% endurance rate\n      throw new Error(`amount ${amount} is not in the allow scale: min: ${this.routerConfig.minAmt} max: ${this.routerConfig.maxAmt}`);\n    }\n\n    let tradeFeeRate = new BigNumber(this.tradeFee);\n    let withholdingFee = new BigNumber(this.withholdingFee);\n    const originWithholdingFee = withholdingFee;\n    if (this.routerConfig.tieredFee) {\n      const subWithholdingFeeAmount = amountBigNumber.minus(withholdingFee).toNumber();\n      const item = this.routerConfig.tieredFee.find(row => subWithholdingFeeAmount > row.range[0] && subWithholdingFeeAmount <= row.range[1]);\n      if (item) {\n        if (item.tradeFee != undefined) {\n          tradeFeeRate = new BigNumber(item.tradeFee);\n        }\n        if (item.withholdingFee != undefined) {\n          withholdingFee = new BigNumber(item.withholdingFee);\n        }\n      }\n    }\n\n    const tFee = new BigNumber(originWithholdingFee)\n      .minus(withholdingFee)\n      .multipliedBy(tradeFeeRate)\n      .dividedBy(100).toString()\n    withholdingFee = new BigNumber(this.routerConfig.withholdingFee).minus(tFee);\n\n    const nonce = '1000';\n    const safeLength = this._getTargetAmountSafeLengthByToken(this.dstToken.symbol, this.dstToken.decimals);\n    const targetNonce = padStart(nonce.substring(nonce.length - safeLength), safeLength, '0');\n    const result = this._getResponseIntent(amountBigNumber.toString(), '0', tradeFeeRate.toNumber(), 0, withholdingFee.toString(), targetNonce, this.dstToken.decimals - safeLength);\n\n    const sendAmount = amountBigNumber.toFixed();\n    const receiveAmount = new BigNumber(result.responseAmount).toFixed();\n    return {\n      sendAmount,\n      receiveAmount\n    };\n  }\n\n  private _getResponseIntent(amountE: string, securityCode: string, tradeFeeRate: number, brokerageTradeFeeRate: number, withholdingFeeAmount: string, targetSafeCode: string, preservePrecision: number) {\n    const amount = new BigNumber(amountE);\n    const tradeAmount = amount.minus(securityCode).minus(withholdingFeeAmount);\n\n    const tradingFeeAmount = tradeAmount.times(tradeFeeRate).div(100);\n    const brokerageTradeFeeAmount = tradeAmount.times(brokerageTradeFeeRate || 0).div(100);\n\n    const responseAmount = tradeAmount.minus(tradingFeeAmount).minus(brokerageTradeFeeAmount);\n    const responseAmountStr = responseAmount.toFixed(preservePrecision, 1);\n    const responseAmountArr = responseAmountStr.split('.');\n    const amountAfter = responseAmountArr[1] || '';\n    const result = {\n      code: 0,\n      value: amount.toString(),\n      tradeAmount: tradeAmount.toString(),\n      tradeFeeAmount: tradingFeeAmount.toString(),\n      brokerageTradeFeeAmount: brokerageTradeFeeAmount.toString(),\n      withholdingFeeAmount,\n      responseAmountOrigin: responseAmountStr,\n      responseAmount: new BigNumber(`${responseAmountArr[0]}.${amountAfter.substring(0, preservePrecision)}${targetSafeCode}`).toString()\n    };\n    return result;\n  }\n\n\n  private _getTargetAmountSafeLengthByToken(symbol: string, decimal: number) {\n    if (decimal >= 18) {\n      return 5;\n    }\n    if (symbol === 'BTC') {\n      return 2;\n    }\n    if (symbol === 'USDT' || symbol === 'USDC' || symbol === 'DAI') {\n      return 4;\n    }\n    return 4;\n  }\n\n}\n","export function padStart(str: string, length: number, chars: string = ' '): string {\n  const paddingLength = length - str.length;\n  \n  if (paddingLength <= 0) {\n    return str;\n  }\n\n  const repeatedChars = chars.repeat(Math.ceil(paddingLength / chars.length));\n  const padding = repeatedChars.slice(0, paddingLength);\n\n  return padding + str;\n}\n\n\nexport async function getTonOrbiterHash(chainId:string,hash:string) {\n  const apiBase = chainId === 'TON' ? 'https://tonapi.io' : 'https://testnet.tonapi.io';\n  const response = await fetch(`${apiBase}/v2/traces/${hash}`, {\n    method: 'GET',\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error ${response.status}: ${response.statusText}`);\n  }\n  const data = await response.json();\n  return data.children?.[0]?.transaction?.hash;\n}"],"mappings":"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","names":["ENDPOINT","CDNENDPOINT","RouterType","VMType","VMType","BigNumber","hexlify","Interface","toUtf8Bytes","VMService","configService","__publicField","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","ownerAddress","spenderAddress","approveToken","ERC20_ABI","STARKNET_ERC20_ABI","Orbiter_V3_ABI_EVM","Orbiter_V3_ABI_STARKNET","EVMService","VMService","srcAddress","srcToken","dstAddress","dstToken","value","vc","routerType","makerAddress","chainId","contractAddress","channelId","transaction","_interface","Interface","ERC20_ABI","recipient","amount","callData","Orbiter_V3_ABI_EVM","to","data","hexlify","toUtf8Bytes","token","BigNumber","ownerAddress","spenderAddress","approveToken","BigNumber","Contract","shortString","uint256","CAIROVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","amount","uint256","approveCall","Contract","STARKNET_ERC20_ABI","contract","Orbiter_V3_ABI_STARKNET","data","ext","shortString","item","call","BigNumber","ownerAddress","spenderAddress","approveToken","BigNumber","IMXVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","call","BigNumber","BigNumber","LPRVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","call","BigNumber","BigNumber","hexlify","toUtf8Bytes","PublicKey","Transaction","TransactionInstruction","createTransferInstruction","getAssociatedTokenAddress","TOKEN_PROGRAM_ID","SolanaVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","srcAddressPublicKey","PublicKey","srcTokenPublicKey","makerAddressPublicKey","srcAddressTokenAccount","getAssociatedTokenAddress","makerAddressTokenAccount","transaction","Transaction","createTransferInstruction","TOKEN_PROGRAM_ID","TransactionInstruction","hexlify","toUtf8Bytes","BigNumber","BigNumber","TonWeb","TVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","data","srcTonAddress","TonWeb","makerTonAddress","forwardPayload","BigNumber","queryId","jettonTransferBody","payloadBase64","BigNumber","ZKLITEVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","call","BigNumber","TronWeb","BigNumber","TRONVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","url","tronWeb","TronWeb","callData","bytesData","functionSelector","params","transaction","BigNumber","ownerAddress","spenderAddress","approveToken","BigNumber","bitcoin","BTCVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","psbt","callDataBuffer","BigNumber","BigNumber","hexlify","toUtf8Bytes","FUELVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","hexCall","hexlify","toUtf8Bytes","BigNumber","BigNumber","hexlify","toUtf8Bytes","APTOSVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","hexCall","hexlify","toUtf8Bytes","requestData","BigNumber","BigNumber","hexlify","toUtf8Bytes","SUIVMService","VMService","routerType","srcAddress","srcToken","dstAddress","dstToken","value","vc","makerAddress","chainId","contractAddress","channelId","hexCall","hexlify","toUtf8Bytes","BigNumber","VMServiceFactory","configService","__publicField","vmType","service","VMType","EVMService","IMXVMService","LPRVMService","SolanaVMService","CAIROVMService","TVMService","ZKLITEVMService","TRONVMService","BTCVMService","FUELVMService","APTOSVMService","SUIVMService","RouterState","ConfigService","apiService","__publicField","chainConfigs","error","e","routerConfigs","routerConfig","basePointRules","tradePair","line","router","chainName","chainConfig","chainId","symbol","chainRules","basePoint","ApiService","apiEndpoint","apiKey","channelId","__publicField","path","params","url","key","param","headers","response","data","chainConfigs","dealerId","entry","routers","line","value","nonce","dealer","brokerageTradeFeeRate","address","offset","hash","BigNumber","isValidAddress","padStart","str","length","chars","paddingLength","getTonOrbiterHash","chainId","hash","response","Router","srcChainConfig","srcToken","dstChainConfig","dstToken","basePoint","_VMService","routerConfig","routerType","_channelId","address","amount","value","BigNumber","vc","valueWithVc","srcAddress","dstAddress","isValidAddress","ownerAddress","spenderAddress","minAmt","withholdingFee","amountBigNumber","maxAmt","tradeFeeRate","originWithholdingFee","subWithholdingFeeAmount","item","row","tFee","nonce","safeLength","targetNonce","padStart","result","sendAmount","receiveAmount","amountE","securityCode","brokerageTradeFeeRate","withholdingFeeAmount","targetSafeCode","preservePrecision","tradeAmount","tradingFeeAmount","brokerageTradeFeeAmount","responseAmountStr","responseAmountArr","amountAfter","symbol","decimal","OrbiterClient","_OrbiterClient","config","__publicField","ApiService","ConfigService","VMServiceFactory","client","tradePair","srcChainConfig","srcVMService","srcToken","token","dstChainConfig","dstToken","routerConfig","basePoint","channelId","Router","routerType","VMType","chainConfig","chains","symbols","chain","chainId","availableTokens","availableTokenAddresses","availableRouter","routerConfigs","tradePairs","router","srcChainId","srcTokenSymbol","address","offset","hash","getTonOrbiterHash","error"]}